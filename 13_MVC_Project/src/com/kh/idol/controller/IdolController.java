package com.kh.idol.controller;

import java.util.ArrayList;
import java.util.List;

import com.kh.idol.model.vo.Board;
import com.kh.idol.model.vo.Fan;
import com.kh.idol.model.vo.Idol;

public class IdolController {
	
	private List<Fan> fl = new ArrayList(); // 회원가입하면 회원정보 담아둘 리스트
	private List<Board> boards = new ArrayList(); // 게시글 담아둘 리스트
	
	// 아이돌들도 어디에 담아놓고 고걸 읽어와서 정보를 출력해줘야 하지않을까? --> 이러면 VO가 하나 더 필요함(아이돌의 정보를 담을 VO)
	// 과감하게 만듭시다~
	
	// 아이돌들 담아놔야지, 에스파가 솔로가수가 아니니까, 아이돌형 배열로 할까 리스트로 할까? 에스파 하다가 한명이 나가거나 들어올수도 있으니까 리스트가 맞지 않을까!
	private List<Idol> aespa = new ArrayList();
	
	// 사용하는 쪽을 위헤 제네릭 작성해줌, 컴파일 시점에 컴파일러가 이 타입을 알 수 있음, 다형성을 적용할 수 있어서 강제 형변환을 안해도됨!
	
// 12:43 List란?
// 컴퓨터공학 추상적 자료형중에 하나, 순차적으로 저장하는 자료구조
// 자바에서는 자료구조 담당하는 컬렉션 프레임워크중에 하나, 알고리즘들이 들어있음, 인터페이스로 구현되어있음
// 실제 구현하는 구현체들은 ArrayList 등등이 있는 부모자료형의 인터페이스
	// 너무 길게 말하지는 말고 간결하게 내 강점에 맞춰서 설명, 이런걸 공부하는 시점에 정해두자, 나중에는 시간없다, 잘 말하는 연습도 하고
	
	// 리스트 구현체 중에 ArrayList를 써볼건데, 부모타입 자료형을 사용해야 구현체를 마음대로 바꿀 수 있는 유연성이 생김, 나중의 유지보수, 기능확장을 생각해서 프로그램 만들기
	// 지금은 이렇게 작업하지만 나중에 이렇게 안하면 큰일나기도 하고!
	
// 12:48 제네릭 컬렉션 프레임워크 알고리즘 추상적..? 뭐가 합쳐진거지
	// 코드 이용해서 문제 해결하는 방법을 알고리즘이라고 할 수 있음, 나의 논리 회로를 돌려서 알고리즘을 만들어내는것
// 12:48 컬렉션은 자료구조에 포커싱이 맞춰져있어서 장점이...? 자바에 메소드로 구현되어 있고?
	
// 12:50 초기화 블록을 이용해서 정보를 담아놓도록 하자
	
}
