package com.kh.plant.run;

import com.kh.plant.view.PlantView;

public class PlantRun {

	public static void main(String[] args) {
		
		// MVC 패턴(Model - View - Controller)
		// 애플리케이션의 구조를 세가지 요소로 분리하자
		// 라는 소프트웨어 아키텍쳐 디자인 패턴(소프트웨어 만들 때 이런 구조로 만들자 + 디자인 패턴 이야기)
		// 1. Model
		// 데이터 담당(저장, 가지고 있는 것!) => VO(model의 범주에 포함됨)
		// 외부매체(우리의 경우에는 대부분 데이터베이스)와의 상호작용 => DAO
		// 아직은 없음(2주 있어야 생길듯) => 비즈니스 로직(이것이 핵심!)
		// 2. View
		// 사용자 인터페이스를 담당(프로그램과 사용자 사이의 매개체)
		// 사용자에게 정보 표시 / 사용자의 입력값을 받아줌
		// 모델에서 만들어진 데이터를 시각적으로 표현
		// 모델과 직접 상호작용하지 않음
		// 3. Controller
		// Model하고 View의 중간다리 역할
		// 사용자 입력을 처리하고 모델에 전달
		// 모델에서 일어난 처리작업을 뷰에 반영
		
		// 아직 완벽한 MVC 패턴이라고 하기는 어렵지만 어차피 계속 해야하기 때문에 미리 하면서 가자~
		// 웹, 앱, 응용프로그램 개발에서 이름만 다르고 다 똑같이 함
		
		// 옛날에 컴퓨터공학에서는 무조건 가르쳤지만 요새는 잘 안가르치는 디자인 패턴(Gang of Four, 1995)
		// 개발자들이 문제해결을 할 때 어떤 방식으로 접근해서 문제해결하는지 조사해서 코드쓰는건 다 다른데
		// 문제 해결, 소프트웨어 만들 때 패턴이 보임, 세부사항은 다르지만 모아보니 패턴으로 만들 수 있네? 패턴화 할수있네 하고 책을 냄
		// 부작용이 있음, 실력이 안느는게 문제가됨
		// 디자인패턴이 많지 않았는데 지금은 수천여개...
		
		// 정형화된 것들은 거기에 맞춰서 해야함! MVC가 그중의 하나
		
		PlantView pv = new PlantView();
		pv.mainMenu();
		
	}

}
