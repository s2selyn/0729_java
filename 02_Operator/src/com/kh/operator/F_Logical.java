package com.kh.operator;

import java.util.Scanner;

public class F_Logical {
	
	/*
	 * 논리 연산자 : 두 개의 논리값을 연산하는 연산자
	 * 
	 * [ 표현법 ]
	 * 
	 * 논리값 논리연산자 논리값 => 논리값(규칙3번! 같은 자료형을 연산했으면 그 자료형과 같은 자료형으로 결과가 나와야 함)
	 * 
	 * 종류
	 * 
	 * 1. AND연산자 : 논리값 && 논리값
	 * 좌항과 우항의 값이 모두 true여야만 최종 결과값이 true
	 * 
	 * 2. OR연산자 : 논리값 || 논리값(|의 이름은 파이프라인)
	 * 좌항과 우항의 값이 하나라도 true일 경우 최종 결과값이 true
	 * 
	 */
	
	// 연산 해보자
	// AND
	public void method1() {
		
		// 계획
		//
		// 1. 사용자에게 정수값을 하나 입력받은 후
		// 2. 사용자가 입력한 정수 값이 0보다 크면서 짝수인지 판별
		// 3. 그리고 나서 결과를 출력
		
		// 0. 1(사용자에게 정수값을 하나 입력받은 후)을 위한 준비 <= 스캐너 사용
		// import 하러 올라갔다 오세요
		// 다녀왔으면 별칭
		Scanner sc = new Scanner(System.in);
		
		// 1. 사용자에게 정수값을 하나 입력받은 후 <= 사용자한테 정수값을 입력 받고싶다! 하면
		// sc.nextInt();
		// 이걸 입력 받아서 써야하므로 변수를 선언할건데, 이것만 쓰면 그냥 입력할 수 있는 상태만 되고 뭔지 알 수 없음
		// 서비스 메세지를 출력해줌
		System.out.print("정수 값을 입력해주세요 > ");
		
		// 그리고 변수 선언
		int num = sc.nextInt();
		System.out.println(num);
		// 모범시민이 해야할 일 변수 찍어보기(항상~ 잘 되겠지 라는 것은 없음! 두눈으로 확인하고 넘어갈 것!, 변수에 담긴 값을 한번 찍어보세요)
		// 메인 메서드로 가서 호출해야함, 다녀오세요
		
		// 2. 사용자가 입력한 정수 값이 0보다 크면서 짝수인지 판별
		// 첫번째로 먼저 생각할 일은 무슨 값? == num (변수를 활용해서 연산해야 함)
		// 두번째로 생각할 일은 무슨 연산???
		// 연산 1. 0보다 큰가(대소비교) 비교연산자, 내가 비교연산을 할 값이 무슨 값인지 생각하기
		// 무슨 값 비교연산? 무슨 값
		// 사용자가 입력한 값 > 0
		// num > 0
		// 연산 2. 2로 나눈 나머지가 0과 일치하는가?(짝수인가)(동등비교)
		// (사용자가 입력한 값 % 2) == 0
		// (num % 2) == 0
		
		// 코드는 한줄씩이므로 단계별로 생각하기, 나눌 수 있는 최소한의 단위로 나누어서 작업하기
		
		// AND 연산자
		// &&의 의미 : 그리고, ~~이면서, ~~이고
		
		boolean result = (num > 0) && (num % 2 == 0);
		// && 좌우로 논리값으로 결과가 나오므로 최종 결과도 논리값으로 나옴, boolean으로 선언
		// 사용자가 입력한 정수가 0보다 크다 그리고 사용자가 입력한 정수를 2로 나눴을 때 나머지가 0인가요?
		// 1. (num > 0), 사용자가 입력한 정수가 0보다 크다
		// 2. (num % 2 == 0), 사용자가 입력한 정수를 2로 나눴을 때 나머지가 0
		// 3. &&, 그리고
		
		// 여러개의 조건을 만족해야만 작업이 수행되도록 하고싶을 때 AND 연산자를 사용
		
		// 3. 그리고 나서 결과를 출력
		System.out.println("입력값이 0보다 크면서 짝수 입니까 ? : " + result);
		
	} // 다했으면 메인 메서드 가서 주석처리
	
	public void method2() {
		
		Scanner sc = new Scanner(System.in); // 다른 메서드이므로 해줘야함
		// 사용자에게 정수 값을 입력받아서
		System.out.print("1부터 100사이의 숫자를 입력해주세요 > ");
		
		// 변수에 대입한 뒤
		int number = sc.nextInt();
		
		// 출력해보세요.(모범시민답게^^!)
		// System.out.println("입력받은 값 : " + number);
		// 해봤으면 주석처리
		
		// 목적 : 사용자가 입력한 정수가 1 ~ 100 사이의 값인지 확인하기
		// 항상 뭘 생각해야 함? 1. 무슨 값을 가지고 2. 무슨 연산을 할 것인가
		// 1_1. 사용자가 입력한 정수, 어디에 있음? number라는 변수에 담아뒀음 == number
		// 1_2. 비교할 값 1
		// 1_3. 비교할 값 100
		
		// 1 <= 사용자가 입력한 값 <= 100 (인간의 시점에서 생각했을 때)
		// 1 <= number <= 100 (이러면 되는거 아님? ㅇㅇ 아님, 이게 되는 언어들도 있음, 파이썬 등)
		// System.out.println(1 <= number <= 100); 이상태는 불가능, 쪼개야함
		// 자바는 수악익힘책으로 해서 1 <= number를 먼저 연산해서 true / false 중에서 하나가 나옴
		// 나온 t/f값은 그다음 100과는 자료형이 다르므로 연산이 불가능

		// 쪼개기 1. 비교할 값 1과 number의 비교
		// 쪼개기 2. 비교할 값 100과 number의 비교
		// 쪼개고 나면 두개 모두 만족했으면 좋겠으니까 &&연산자 사용
		
		// 2_1. (0 < number ) && (number < 101)
		// 2_2. (100 >= number) && (1 <= number)
		// 2_3. (1 <= number) && (number <= 100)
		// 2_4. (number >= 1) && (100 >= number)
		// 쓰고싶은 거 쓰면 되긴 한데(결과는 똑같이 나옴, 실행도 잘 됨), 조금 더 생각해서 일반적으로는 2_3.을 선호함, 가장 보기좋음
		// 알아보기 쉬우니까(의미론적 내용, 영역 사이에 포함되는지 체크하고 싶음)
		// 2_1. 도 number가 가운데 모여있으니까 보기에는 편하지만 의미를 해석하기에는 2_3.이 더 편함
		
		// 사용자가 입력한 값이 1 ~ 100 사이의 값인지를 판별하여 출력해줄 것(최종적으로 하고싶은것)
		boolean result = (1 <= number) && (number <= 100);
		System.out.println("입력값이 1부터 100사이의 값입니까? : " + result);

		// 수업시간에 하는것은 전세계 개발자들의 일반적인 내용임, 회사에 가면 그곳의 규칙을 따르세요
		
	} // 다 해봤으니 메인 메서드에서 주석처리
	
	// OR
	public void method3() {
		
		// 사용자에게 한 글자를 입력 받아서
		// 입력받은 값이 'A' 또는 'a'인지 확인해서 출력하기
		
		// 여기에서만 살아가는 스캐너가 필요함
		// 위에서 쓴 스캐너는 위에서만 살았음
		Scanner sc = new Scanner(System.in);
		
		// 출력문을 이용해서 한 글자만 입력해달라고 하기
		System.out.print("한 글자만 입력해주세요 > ");
		
		// 중간점검하기, Run 클래스의 메인 메서드 다녀오세요
		
		// 한글자만 넣을 변수, nextChar는 없음
		// 일단 nextLine을 쓰는데 이것은 문자열을 개행문자 이전까지 읽어오는 메서드임
		char letter = sc.nextLine().charAt(0); // nextLine 메서드만 불러오면 letter를 char형으로 선언했기 때문에 자료형이 다르므로 들어갈 수 없음, charAt 메서드 호출, 기본적으로 0이 들어감
		// 무엇을 입력하든 첫 글자는 0번 index에 있으므로 0을 입력하면 됨
				
		// 모범시민이 되기 위해서는 출력을 해보아야함
		// System.out.println(letter);
		// 확인했으면 주석처리
		
		// charAt 메서드 설명
		// String str = "KH정보교육원"; // 이건 문자열, 문자의 나열(sequence 자료형)
		// 일반적으로 sequence가 붙은 애들은 "순서가 있는" 문자의 나열
		// 순서는 index라고 표현, 책의 목차같은 것들
		// 문자열들도 index가 달려 있음, 문자열은 문자의 나열이니까 문자들이 실제 메모리상에서 한글자씩 순서대로 들어가있음
		// index는 숫자로 표현, 0번부터 시작
		// index는 값이 들어있는 메모리 공간의 앞쪽 위치에 주소처럼 달려있음
		// 한칸씩 들어가있는 글자들의 덩어리를 문자열이라고 표현함
		// 문자열에서 특정 index에 들어있는 char형 값을 빼오기 위한 메서드가 charAt
		// nextLine으로 가져온 문자열 중에서 제일 첫 글자는 무조건 0번 index에 있음
		// 0번 index로 가져오면 제일 앞의 한 글자만 char형으로 가져올 수 있음
		// char ch = str.charAt(5); // 특정 index에 들어있는 문자열을 ch에 담았음
		// System.out.println(ch); // 담겨있는 문자열을 출력함
		
		/*
		 * String str = "KH정보교육원";
		 * char ch = str.charAt(5);
		 * System.out.println(ch);
		 * index : 0부터 시작
		 * 
		 */
		
		// 입력받은 값이 'A' 또는 'a'인지 확인하기
		// 무슨 값?
		// 1_1. 사용자가 입력한 한 글자(모름, 일단 담아뒀음) == letter(char형 변수)
		// 1_2. 'A'
		// 1_3. 'a'
		
		// 무슨 연산?
		// == 동등비교 연산(letter가 A와 같은지, letter가 a와 같은지)
		// 한꺼번에 볼 수 없으니 따로 해야함
		// 이번에는 단일 문자인데, 단일 문자의 경우 동등비교 연산이 가능한가?
		// 가능하다! ==> 왜???
		// char형이 int형으로 자동형변환이 일어난 뒤 연산을 함(char형과 char형을 연산하면 int형으로 변함)
		
		boolean result = (letter == 'a') || (letter == 'A');
		// || : ~~~이거나, 또는, 둘중에 하나라도
		
		// 출력하기
		System.out.println("사용자가 입력한 값이 'A'또는 'a'인가요? > " + result);
		
	} // 다 썼으니 메인 메서드에서 주석처리
	
		/*
		 * AND(&&) : 두 개의 조건이 모두 true일 경우 true
		 * 
		 * true && true   : true
		 * true && false  : false
		 * false && true  : false
		 * false && false : false
		 * 
		 * OR(||) : 두 개의 조건 중 하나라도 true일 경우 true
		 * 
		 * true || true   : true
		 * true || false  : true
		 * false || true  : true
		 * false || false : false
		 * 
		 * AND를 달고 산다...
		 * OR는 까먹어도 문제 없을 수도?
		 * 
		 */
	
	public void tip() {
		
		int num = 10;
		
		boolean result = false && (num > 0);
		// AND 연산을 할건데 좌항이 false임
		// AND 연산이므로 둘 다 true여야 결과가 true로 나옴
		// 앞이 false이면 뒤의 연산을 할 필요가 없음, Dead code로 경고
		
		boolean result2 = (num < 0) && (num == 0);
		// 10 < 0 이니? 이미 false
		// && 연산자 앞이 false이면 자바는 && 연산자 뒤의 연산을 수행하지 않음
		// 숏 서킷 연산으로 기억해두고 나중에 배움
		
	}
	
}
