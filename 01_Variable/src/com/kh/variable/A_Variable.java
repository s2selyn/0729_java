package com.kh.variable;

public class A_Variable {
	
	// 변수 : Memory(RAM)에 값을 저장하기 위한 공간
	
	// 숫자나 값이라는 개념을 지워야 함
	// 메모리는 각종 기억장치를 포함하는 개념, 자바에서 메모리라는 표현은 RAM을 의미함
	// 양말들을 상자에 넣어 정리한다고 할 때, 양말이 변하니까 변수라고 생각할 수 있지만 프로그래밍 언어에서는 상자가 변수를 의미함
	
	// 변수를 사용하면 뭐가 좋을까 ??
	
	// 원섬플레이스 키오스크(시즌 메뉴)
	public void findSeasonMenu() {
		
		// 1. 시즌메뉴들을 출력(메뉴명, 가격)
		
		// 2. 사용자가 메뉴판을보고 주문을 했다 가정
		
		// 3. 고객이 구매한 메뉴의 가격을 출력
		
		System.out.println("--- 변수를 사용하기 전 ---");
		System.out.println("시즌 메뉴 : ");
		// System.out.println("1. 딸기라떼(6700)");
		System.out.println("1. 한교동 갈릭쉬림프 프레첼(1856)");
		System.out.println("2. 요거 젤리 소다 플랫치노(3900)");
		System.out.println("3. 케로케로케로피 멜론라떼(4200)"); 
		
		// 가정
		// 딸기라떼를 25잔 시킴
		// 케로케로케로피 멜론라떼 30잔 시킴
		
		// 1번 메뉴를 변경함, 메뉴명 수정
		// 변경한 1번 메뉴의 가격을 변경함, 메뉴 가격 수정, 연산식 수정
		
		System.out.println("----------");
		// System.out.println("딸기라떼를 25잔 시키셨습니다.");
		System.out.println("한교동 갈릭쉬림프 프레첼을 17개 시키셨습니다.");
		
		// 주문가격 => 167500원
		// 메뉴가격 X 개수
		// 자바에서 곱하기 연산을 해야하는 경우
		// * 기호를 사용합니다.
		// 167500원 입니다.
		
		// System.out.print(6700 * 25);
		// System.out.println("원 입니다");
		
		// 자바에서 문자열 값과 다른 형태의 값을 붙여서 사용하고 싶은 경우
		// + 기호를 사용합니다.
		
		// System.out.println((6700 * 25) + "원 입니다.");
		System.out.println((1856 * 17) + "원 입니다.");
		// 연산자와 피연산자는 한칸씩 띄워놓기
		// 사칙연산은 곱하기 나누기 먼저지만 그래도 괄호 안에 넣어서 보기 편하게
		
		// 위 두줄을 참고해서 출력문을 두 번 작성하여
		// 다음과 같이 출력하시오.
		// ↓
		// 케로케로케로피 멜론라떼 30잔 시키셨습니다.
		// (메뉴가격 X 개수)원 입니다.
		
		System.out.println("케로케로케로피 멜론라떼 30잔 시키셨습니다.");
		System.out.println((4200 * 30) + "원 입니다.");
		
		System.out.println("==========");
		
		System.out.println("변수를 사용해 봅시다!");
		System.out.println("시즌 메뉴 : ");
		
		// 메뉴명과 가격이라는 값을 담을 공간
		// 즉, 변수를 선언하고 변수공간에 값을 대입해서 사용
		
		String seasonMenu = "KH정보교육원 A강의장에서 만든 딸기라떼"; // seasonMenu라는 식별자를 가지고 문자열을 담을 수 있는 변수를 선언
		// String을 만들고, seasonMenu라고 이름붙이고, ""이 seasonMenu에 들어감
		
		int price = 5700; // price는 변수 식별자, price라는 식별자를 가지고 정수를 담을 수 있는 변수를 선언
		// 정수형을 담는 공간을 내놓아라, 이름을 price로 붙여라, 4700밖에 없네, 4700을 price라는 공간에 넣어라  
		// 오른쪽의 값을 5700으로 바꾸면 price로 작성한 아래쪽의 모든 것들이 바뀌어서 출력됨 
		
		// String은 문자열을 담는 자료형, int는 정수값을 담는 자료형
		// 변수 식별자(변수 이름)
		// 변수를 선언했다는 것은 저장 공간에 값을 담을 수 있는 공간을 만들었다는 의미
		// = 는 대부분의 프로그래밍 언어에서 대입 연산자로 불림, assignment
		// 대입연산자를 기준으로 항상 왼쪽은 공간이고 오른쪽은 값, 예외 없음! 무조건!
		// 왼쪽 공간(1)에 오른쪽 값(2)을 대입하겠다(3)는 의미가 됨
		// 오른쪽에 있는 모든 것이 끝나야 대입이 이루어짐. 무조건! 예외 없음!
		// 지금은 String이 예외상황임, 실제로는 seasonMenu 공간에 "KH정보교육원 A강의장에서 만든 딸기라떼"가 들어가는 것은 아님
		// 문자열값이 들어간 것이 아니라 다른 무언가가 들어갔음. 아직 모르는 상태
		
		/*
		System.out.println("1. KH정보교육원 A강의장에서 만든 딸기라떼 (4700)");
		System.out.println("KH정보교육원 A강의장에서 만든 딸기라떼 17개 시켰니?");
		System.out.println("가격은 " + (4700 * 17) + "원 입니다.");
		System.out.println("KH정보교육원 A강의장에서 만든 딸기라떼 12개 시켰니?");
		System.out.println("가격은 " + (4700 * 12) + "원 입니다.");
		*/
		
		System.out.println("메뉴명 : " + seasonMenu); // println은 출력하는 메서드, 출력문 안에 변수 식별자를 넣으면 실제로 출력되는 내용은 공간에 대입되어 있는 값이 나옴
		System.out.println("가격 : " + price); // price는 변수 식별자, 출력문 안에 변수 식별자를 넣으면 공간에 대입되어 있는 값이 나옴
		System.out.println(seasonMenu + "를 17개 시켰니?");
		System.out.println((price * 17) + "원 입니다.");
		System.out.println(seasonMenu + "를 12개 시켰니?");
		System.out.println((price * 12) + "원 입니다.");
		
		/*
		 * 변수를 사용했더니 ?
		 * 
		 * 1. 단 한번 값을 대입해서 필요한 순간마다 다시 사용할 수 있음
		 *    => 재사용성이 높아짐(수정하기 편해지고)
		 * 2. 값에 의미를 부여할 수 있음
		 *    => 코드가 많아지면 많아질수록 가독성이 높아짐(코드가 읽기 편해지고)
		 * 
		 * 가독성과 재사용성이 높아지면 유지보수가 용이해짐
		 * 
		 * 개발자가 값을 다루는 방법
		 * 
		 */

	} // 출력되는 결과는 같지만, 수정할 일이 생겼을 때 일일히 수정하지 않아도 된다.
	
	// 메서드 영역 밖, 클래스 영역 안
	
	// 변수 선언 방법에 대해 알아봅시다
	public void declareVariable() {
		
		/*
		 * 변수 선언 방법
		 * 
		 * int price;
		 * 
		 * 자료형(DataType) 변수식별자; 변수 선언 끝!
		 * 권장하는 방법은 아니지만 동일한 타입의 변수를 선언할 때는 한번에 선언 가능
		 * int a, b, c; <-- 권장하지 않음(그냥 이렇게 하지마라는 뜻), 한 줄에 하나씩 선언하는 것을 권장함(이렇게 하라는 뜻)
		 * 
		 * 변수를 선언하고 난 뒤 처음 값을 대입하는 것을 초기화(Initialization)라고함, 대입과 같음, reset이 아님
		 * 반드시 대입 연산자를 이용해서 값을 대입해야 사용가능함(초기화)
		 * 초기화를 통해 대입한 값을 초기값☆☆☆☆☆이라고함
		 * 
		 */
		
		// System.out.println(price);
		
		// 변수는 자신이 선언된 {scope} 에서만 사용할 수 있음
		// local variable(지역 변수), 자바에는 이름이 다르고 생존 범위가 다르고 사용 목적이 다른 변수의 종류들이 있음

		/*
		 * 식별자(Identifier)
		 * 
		 * 클래스명, 메소드명, 변수명, (아직 배우지 않은 친구들) 등등 개발자가 만들어서 이용하는 고유의 이름
		 * 모두 묶어서 식별자라고 함
		 * 
		 * - 식별자를 생성할 때 꼭 지켜야 하는 규칙!(안 지키면 안만들어짐)
		 * 
		 * 1. keyword(예약어)는 식별자로 사용할 수 없음(보라색 글자들)
		 * 2. 공백은 포함할 수 없음(latte price 불가능)
		 * 3. 대, 소문자를 구분하고 길이제한은 없음(price, pRice, prIce, priCe 전부 다른 변수로 인식함)
		 *    이론상 길이제한은 없는데, 운영체제마다 각 파일이 가질 수 있는 용량이 정해져있어서 실제로 무한의 문자열이 들어갈 수는 없음
		 * 4. 문자, 숫자, _, $를 포함할 수 있음(권장하지는 않지만 한글도 됨)
		 * 5. 문자, _, $로만 시작할 수 있음(숫자로는 시작 불가)
		 * 
		 * - 개발자들끼리의 암묵적인 약속(안 지키면 욕먹음) => 영어말고 쓰지말자(숫자도 웬만하면 쓰지말자, 특수문자도 필요한 경우가 있긴 함)
		 *   (camel case)
		 *   (stackoverflow라는 곳에서 질의응답가능, 네이버 지식인 같은 것, 답변을 달아둔 내역을 보고 헤드헌팅도 함, 꼰대같은 개발자들의 정석)
		 *   
		 * 1. 클래스 / 인터페이스 명명 규칙(upper camel case)
		 * 
		 * - 첫 글자는 대문자로 표기(소문자로 시작해도 프로그램이 돌아가긴함...)
		 * - 연결된 단어들의 첫 글자도 대문자로 표기
		 * - 명사, 형용사를 서술적으로 연결해서 사용
		 * 
		 * --> WelcomeToJavaWorld(Welcometojavaworld는 단어 구분 불가, Welcome to java world는 띄워쓰기 입력 불가)
		 * 
		 * 2. 변수 명명 규칙(lower camel case)
		 * 
		 * - 명사적 의미를 갖게 만들어 줌
		 * - 첫 글자는 소문자로 표기, 연결된 단어들을 첫글자를 대문자로 표기
		 * 
		 * --> phoneNumber
		 * 
		 * 3. 메소드 명명 규칙
		 * 
		 * - 동사적 의미를 갖게 만들어 줌(명령어 어조)
		 * - 첫 글자를 소문자로 표기, 연결된 단어들은 첫 글자를 대문자로 표기
		 * - 메소드 식별자의 경우 식별자 뒤에 반드시 한 쌍의 "(소괄호)"를 붙임
		 * - 메소드에는 일반적으로 _를 사용하지 않음(팀장님 책상 뒤집어엎기쌉가능, 생성형 AI 수준은 지금 3년차 개발자 수준이래)
		 *  
		 * --> join(), signUp()
		 * --> public int getPhoneNumber(){return 0;}
		 * 
		 * 4. 상수 명명 규칙
		 * 
		 * - 모든 문자를 대문자로 표기
		 * - 단어와 단어 사이는 _를 사용해서 구분한다.
		 * 
		 * --> LOGIN_OK
		 * 
		 */
		
		// 변수의 자료형
		// Java의 기본자료형, 원시자료형
		//        PrimitiveType
		
		/*
		 * 1. 논리자료형(논리 값 : true / false)
		 */

		// 자료형 변수식별자; <-- 변수 선언
		
		boolean isTrue; // 자료형 쓰고 변수식별자 쓰고 세미콜론 찍은 과정을 변수 선언이라고 함
		// a.findSeasonMenu();는 그만 부르고 a.declareVariable();을 부르려고 Run Class에서 수정했음
		// 초기화 하지 않은 상태에서 그냥 System.out.println(isTrue); 하면 The local variable isTrue may not have been initialized
		// 지역변수(localVariable)은
		// 초기화(Initialized)를 하지 않으면 사용할 수 없음
		// 메모리 어딘가에 true / false 타입을 담을 수 있는 공간을 만들고 이름을 isTrue라고 지었음, 자바는 확인이 안됨(? 알아봤자 의미도 없고 쓸 수도 없음?)
		
		isTrue = true; // 초기화(공간에 초기값을 대입해주면 됨, 제일 처음 값을 대입하는 것)
		// 대입 연산자 기준으로 왼쪽이 isTrue 공간임을 확인하고 오른쪽에 true라는 값을 확인한 다음 true값을 isTrue 공간에 대입
		System.out.println(isTrue); // isTrue에 있는 것을 출력해달라고 했으므로 true가 출력됨
		
		// 변수는 공간이기때문에 아래도 가능해진다
		
		isTrue = false; // 대입(초기화 이후에 대입연산자를 사용하여 값을 대입)
		// 대입 연산자 기준으로 왼쪽이 isTrue 공간임을 확인하고 오른쪽에 있는 false라는 값을 확인한 다음 true 대신 isTrue 공간에 false값이 대입됨
		System.out.println(isTrue); // isTrue에 있는 것을 출력해달라고 했으므로 false가 출력됨
		
		/*
		 * 코드를 읽는 방법 1. 컴퓨터처럼 읽자
		 * 문법을 방법론적으로 받아들이면...?
		 * 변수는 개발자가 메모리상에 값을 올리는 방법
		 * 컴퓨터는 순서와 해석방법을 정해두고 움직임(위에서 아래로 읽고, 한 줄은 왼쪽에서 오른쪽으로 읽는다.)
		 * 
		 * 코드를 읽는 방법 2. 변수는 값이 아니다
		 * true나 false가 변수가 아님
		 * 
		 * 자바가 메모리에 대해 공부하기 좋은 언어는 아니지만 메모리에서 무슨 일이 일어나는지 유추할수는 있음
		 * 
		 * 항상 코드를 최소단위로 나누어서 해석하는 연습
		 * 키워드도 의미가 있고, 연산자도 역할이 있음
		 * 코드를 작성하면 컴퓨터에서 무슨 일이 일어나는지 생각해볼것, 빠를수록 개발이 쉬워짐
		 * 
		 */
		
		/*
		 * 2. 숫자 자료형
		 * 
		 * 정수형
		 * 
		 * 정수형에는 4가지 자료형이 존재함
		 * byte, short, int, long 형이 있음
		 * int 형을 주로 쓰세용~~!
		 * long형을 사용할 때는 대입할 숫자뒤에 "L"을 붙임, 변수만 봐서는 정수형의 종류를 구분할 수 없으므로 식별자를 붙여줌(소문자 l은 헷갈릴 수 있으므로 대문자 L)
		 * 
		 * 실수형
		 * 
		 * 실수형에는 2가지 자료형이 존재한
		 * float, double(기본)형이 있음
		 * float형은 사용하기 위해서는 할당할 숫자 뒤에 F를 붙여야 함(소문자 f는 4처럼 보일수도 있다네요)
		 * 
		 */
		
		// 2_1. 정수형(크기에 따라서 분류)
		byte byteNumber = 1;   // 1Byte, -128 ~ 127까지 표현할 수 있음
		short shortNumber = 2; // 2Byte
		int intNumber = 3;     // 4Byte, 당분간은? 끝날때까지? 기본적으로 정수를 쓰면 이것으로 인식함
		long longNumber = 4L;  // 8Byte, 간혹?
		
		// RAM은 소중한 자원입니다. 지금도 그렇지만 옛날에는 더 소중했음, 쪼개서 쓰던 시절
		// 1Byte는 8칸이라고 생각
		// 자바는 컴파일러가 최적화를 알아서 해줌
		// 웹사이트에서 웬만하면 int의 범위를 넘어가는 정수값을 쓸 일이 거의 없음
		// 변수에 대입되는 값 그 자체를 리터럴이라고 함, 리터럴도 결국은 메모리에 올라가야 사용할 수 있음
		
		// 2_2. 실수형
		float floatNumber = 2.22F;  // 4Byte
		double doubleNumber = 3.33; // 8Byte
		
		// 변수 선언과 동시에 초기화(일반적으로 권장하는 방법)
		
		// 3. (단일)문자형
		char gold = '밥'; // 2Byte
		// 단일문자에는 반~~~~~~~~~~드시 홑 따옴표를 붙여줍니당
		
		// 여기까지가 기본자료형 / 원시자료형 8개!(boolean, byte, short, int, long, float, double, char)
		// 자버지가 이렇게 만들었음, 단순암기의 영역
		// char isFalse = true; 이런건 안됨
		
		// 사용하려고 하는 값의 형태에 따라서 앞에 적어주는 자료형이 달라짐
		// 정수 8, 단일문자 8
		
		// 컴퓨터가 값을 해석하는 방법은 단순함
		// 프로그래밍 언어는 사람이 보고 이해하기 위해 만든 것
		// 컴퓨터는 사람이 만든 프로그래밍 언어 해석을 할 수 없음
		// 사람이 만든 것을 컴퓨터가 알아볼 수 있는 형태로 변환해야 함 = 컴파일은 변환하는 과정, 변환하는 도구를 컴파일러(Complier)라고 함
		// JDK를 설치하면서 컴파일러가 설치되어 동작하고있음
		// 소스코드를 만들고 컴파일 명령어를 수행해서 클래스 파일을 만드는 것이 정석이지만 IDE를 이용하고 있음
		// IDE가 Project 탭에 Build Automatically 체크박스를 해두어서 우리가 소스코드를 작성하고 저장하는 순간 알아서 컴파일이 진행됨
		
		// 컴퓨터는 다 흡수해서 분해, 펼쳐서 자기가 읽을 수 있는 순서대로 조립함
		// 미리 약속을 정해둔 것을 토대로 판단
		// 자료형은 개발자가 사용하려고 하는 값을 어떤 형태로 쓰겠다는 것을 컴퓨터에게 알려주는 것
		
		// 실질적으로 가장 많이 활용하는 것은
		// 4. 문자열 : 참조자료형(기본자료형으로 제공되지않음)
		// 다른 자료형은 특정한 크기를 정해둔 공간을 할당받아서 쓸 수 있음
		// 문자열은...? 얼마나 공간을 차지할 지 알 수 없음
		String str = "abc"; // 문자열 같은 경우 반드시 쌍따옴표를 앞 뒤로 붙여줌!
		
		// 9개의 자료형을 가지고 변수를 선언
		// 각각의 변수에 초기값을 대입 초기화를 진행
		// 9개의 변수에 값이 잘 대입되었는지 확인을 해보고 싶음! -> 출력
		
		// 논리자료형 1개
		System.out.println("논리 자료형 : " + isTrue);
		
		// 정수자료형 4개
		System.out.println("정수 자료형 : " + byteNumber);
		System.out.println("정수 자료형 : " + shortNumber);
		System.out.println("정수 자료형 : " + intNumber);
		System.out.println("정수 자료형 : " + longNumber);
		
		// 실수자료형 2개
		System.out.println("실수 자료형 : " + floatNumber);
		System.out.println("실수 자료형 : " + doubleNumber);
		
		// 단일 문자 자료형 1개
		System.out.println("단일 문자 자료형 : " + gold);
		
		// 문자열 자료형 1개
		System.out.println("문자열 자료형 : " + str);
		
		// 출력문의 종류
		// System.out.print();
		// System.out.println(); => 개행한다
		// System.out.println("isTrue라는 변수에 대입한 값 : " + isTrue + ", char형은 : " + gold); // 이런 경우가 있지만 귀찮음, 실수할 수 있음
		
		// 이런 상황에서 쓸 수 있는 것
		// System.out.printf(); => f는 format, 개행 안 함
		// 우리가 원하는 출력 결과물 ↓
		// isTrue라는 변수에 대입한 값 : false , char형은 : gold
		// System.out.printf("isTrue라는 변수에 대입한 값 : XXX, char형은 : XXX"); 라고 적어놓고 생각
		System.out.printf("isTrue라는 변수에 대입한 값 : %b, char형은 : %c", isTrue, gold);
		// 일단 코드를 먼저 다 입력하고 결과를 확인한 뒤에, 방법이 무엇인지 확인하는 방법으로 공부하기
		// 자료형이 중요함, boolean값을 출력하고 싶으면 %b, char형 값을 출력하고 싶으면 %c을 넣음
		// ()안에서 작성한 순서대로 들어감
		// %b : true / false타입의 변수 공간, boolean
		// %d : byte, short, int, long 정수형 변수 공간, decimal
		// %f : float, double 실수형 변수 공간, float
		// 소수점 자리수 조절은 %와 f 사이에 온점을 찍고 소수점 자리수 입력
		// %c, %C : char문자형 변수를 담기위한 공간, 대문자인 경우 알파벳일때 대문자로 찍겠다는 뜻, character
		// %s, %S : String문자열형 변수를 담기 위한 공간, 알파벳인 경우에는 대소문자를 구분해서 사용, string
		
		// 단순한 방법 System.out.println();을 그냥 쓰면 개행됨
		// escape sequence라는 탈출문자가 있음, 특수한 기능을 가진 문자들
		// 1. 개행문자(\n), 2. 탭문자(\t)
		System.out.printf("\ndoubleNum 값 : %.2f", doubleNumber);
		
		System.out.println("=================================");
		
		// 상수(프로그래밍 언어)
		// 수학 익힘책에서의 상수의 개념과 프로그래밍 언어에서의 상수의 개념을 합치면?
		// => 값을 변경하지 않을 변수 공간
		
		// 잘나가는 KH가 설립된 년도를 저장할 공간이 필요함
		int startYear = 1998;
		startYear = 2025; // 값이 바뀔 수 있음
		System.out.println("KH 설립연도 : " + startYear);
		
		// 결론적으로 자료형은 동일하므로 int로 시작
		final int START_YEAR = 1998; // 상수의 명명 규칙에 의해 대문자와 _를 사용, final 이라는 키워드를 붙이면
		// START_YEAR = 2026; // final을 붙이는 순간 이것은 불가능해짐, final로 선언한 다음에는 새로 값을 대입할 수 없게됨
		// 무조건 선언과 동시에 초기화해서 사용
		
	}

} // 클래스 영역
