package com.kh.variable;

	// 키보드의 입력을 받는 것은?
	// 키보드가 존재하는 계층은 Hardware, 이것을 메인보드(마더보드)에 선으로 연결해뒀음
	// 키보드를 조작하는 것은?
	// 시스템 소프트웨어 영역에 커널이라는 곳에서 마더보드와 연결되어 키보드로 입력받은 것을 받아옴
	// 우리가 조작하는 곳은?
	// 응용 소프트웨어 영역(Application), 이클립스
	// 여기에서 콘솔창에서 사용자가 입력한 값을 받으려고 함
	// 내려갔다 올라갔다? 변수도 만들어야 하고 왔다갔다?
	// 바이오스 코드 4만줄~ 시스템 소프트웨어도 20만줄~ 이클립스도 몇만줄~
	// 돌리려면 수십만줄인데... 당장 키보드 입력값을 받아오기는 어려움
	// 개발자들도 다 이런 시절이 있었을텐데! 출력해봤으면 입력도 받아보고싶을텐데!
	// 자바 뿐만 아니라 모든 프로그래밍 언어에서 입력을 받을 수 있는 도구를 만들어서 제공함 --> API(Application Programming Interface)
	// JDK 내부에 포함이 되어있음, String도 API 중의 하나
	// 개발에 필요한 것을 언어적인 측면에서 만들어 제공해줌
	// 자바는 클래스 기반 언어이므로 클래스를 제공함

	// 변수 : Memory(RAM)에 값을 저장하기 위한 공간
	// 지금은 선생님과 똑같이 설명할 수 있도록 공부(이론적, 개념적인 이야기들)
	// 개념적인 이야기들은 미루지 말고 미리 정리해두기
	// 사람의 기억은 무한하지 않고 평균적으로 20일이면 잊어버리니까 8번 정도 반복, 160일 정도 투자하자

	// 1절. import절을 작성해서 어떤 패키지에 존재하는 클래스를 사용할 것인지 선언!
import java.util.Scanner;

public class B_KeyboardInput {
	
	// 입력을 직접 구현하기에는 많은 시간과 노력이 필요함
	// 자바에서 자체적으로 제공하는 API중에서 한가지를 이용해서 사용자의 값을 입력받을 것
	
	/*
	 * 키보드를 이용해서 사용자에게 값을 입력받을 예정
	 * 자바에서 제공해주는 Scanner라는 클래스(API)를 사용합시다!
	 * Scanner 클래스에 존재하고 있는 메소드들을 호출해서 입력을 받을 수 있음
	 * 
	 */

	public void inputTest() {
		
		// System.out.println("하하호호~");
		// 이것을 출력하려면 호출해야함, 어디? 메인 메서드 안에서 호출해야 함
		// 메인은 메서드이기 때문에 클래스가 있어야 쓸 수 있음
		// Run이라는 이름을 가진 클래스에 만들었음. 메인에 다녀오시오
		
		// 2절. 클래스의 별칭을 지어주면서 new(생성?)를 해줌!
		Scanner sc = new Scanner(System.in);
		// System.out의 out은 표준출력도구를 의미함, 다다음주쯤 이야기
		// System.in : 표준 입력 도구에서 입력받은 값들을 받겠다.(바이트 단위)
		// 자바에서는 Console이 표준 입력 도구
		
		// 외부 클래스의 메서드를 사용하려면(?) 1, 2절을 해야만 다음 작업을 수행할 수 있음
		
		// 오늘은 예제를 뭘로 해볼까요?
		// 원섬후레이스
		// 사용자에게 주문할 음료를 입력받아서 출력해보자~~~
		
		// 서비스 메세지 : 프로그램에서 먼저 이런 것들이 있는데, 어떤 것들을 고르시겠어요? 등
		// 입력받고자 하는 내용을 알려주거나 먼저 질문을해서 입력을 유도
		System.out.println("1섬 후레이스에 오신 것을 환영합니다."); 
		System.out.println("============ 😎 메뉴판 😎 ============");
		System.out.println("😎. 한교동 갈릭쉬림프 프레첼");
		System.out.println("😎. KH정보교육원 A강의장에서 만든 딸기라떼");
		System.out.println("😎. 물");
		System.out.println("==================================");
		System.out.print("주문하실 메뉴를 입력해주세요 > ");
		
		// 입력받을때는 Scanner 클래스의 메서드를 호출해야 함
		// 위에서 생성한 별칭 + 참조연산자(.)
		// next() : 사용자가 입력한 값을 입력받음
		// sc.next(); // 이 메서드를 호출해서 사용자가 값을 입력할 수 있게 함 
		// 이걸 작성하고 Run하면 콘솔창에 입력 할 수있음, 빨간 네모 생김
		// 아무거나 입력하고 엔터치면 빨간 네모 회색으로 꺼짐
		
		// 사용자가 입력한 메뉴를 출력해주기
		// "물을 주문하셨습니다."
		// 사용자가 입력한 값을 사용하기 위해서는??
		// 사용자가 입력할 값을 개발자가 미리 알 수 없지만 입력할 값을 다시 활용하고 싶으니 어딘가(공간)에 저장해두어야함
		// 지금은 변수밖에 배운 것이 없음
		
		// 위에서 sc.next(); 부분이 입력한 값이 될 것이므로 문자열 자료형으로 바꾸어줄것, 아래와 같이 수정
		String menu = sc.next();
		// 1. 대입 연산자를 기준으로 왼쪽을 보면, 변수 선언(메모리에 문자열을 넣을 공간을 만들고 이름을 지었음)
		// 2. 대입 연산자를 기준으로 오른쪽을 보면, (실제로는 많은 일이 일어나기는 하지만) Scanner의 동작원리
		// 실행하면 커서가 깜빡임(입력 가능한 상태)
		// 키보드를 이용해서 값을 입력함 -> 대입을 하지 않은 상태, 다른 공간(입력버퍼)에 들어감, 엔터를 치기 전까지
		// 버퍼는 거의 모든 상황에서 임시 저장을 위한 공간을 의미함
		// 엔터를 치면 스캐너가 메서드를 이용해서 버퍼에 있는 값을 읽어옴
		// 위에서 바이트 단위로 읽어온다고 했으므로 실제로는 아, 메, 리, 카, 노 한글자씩 읽어옴
		// 이제 3번을 수행할 준비 끝!
		// 3. 2가 끝나면 대입 연산자를 수행, 아메리카노가 대입됨
		
		System.out.println(menu + "을(를) 주문하셨습니다.");
		
		// next 메서드는 사용자가 입력한 값을 받긴 하지만 잘리는 경우가 있음
		// next() : 사용자가 입력한 값 중 공백이 있을 경우 공백문자 이전까지만 입력받음
		
		// 몇 잔 이요?
		System.out.print("몇 개 주문하시겠습니까?(숫자로 입력해주세요) > ");
		
		// 입력받고 싶으니까 Scanner 사용, 정수값으로 받고 싶음 --> nextInt()
		// nextInt() : 입력값을 정수형으로 받음
		// nextDouble() : 입력값을 double형으로 받음
		// 입력값을 받아서 활용하고 싶으므로 int 자료형을 사용하여 변수를 선언
		// 변수 선언 방법은?
		// 타입 변수명
		int number = sc.nextInt();
		// 1. 변수 선언, 정수 자료형을 쓸 공간을 주세요, 이름은 number로 할게요
		// 2. 대기상태로 전환
		// 입력된 값이 입력 버퍼로 이동
		// 엔터를 치면 입력 버퍼에 있던 입력된 값을 Scanner가 읽어와서
		// 3. number 공간에 대입함 
		// 여기서는 실제 입력된 정수가 저장됨
		
		System.out.println(menu + "를 " + number + "개 주문하셨습니다.");
		
		// 배달까지 해봅시다
		System.out.print("주소지를 입력해주세요 > ");
		
		// nextLine() : 사용자가 입력한 값을 공백과 무관하게
		//				개행문자 이전까지 전체를 다 읽어옴
		// nextLine()을 한번더 호출하기
		// nextLine() : 입력버퍼에서 개행문자 이전까지의 모든 값을 가져온 후
		// 				입력버퍼에 존재하는 "개행문자"를 날려줘야함
		sc.nextLine(); //입력 버퍼에 남아있는 개행 문자를 없애는 역할
		String address = sc.nextLine(); // 입력값을 받을 준비가 된 상태
		// 1. 대입 연산자 왼쪽에서 변수 선언, 문자열 저장할 공간을 주세요, 이름은 address로 하겠습니다.
		// 2. 왼쪽을 했으니 오른쪽으로 감, 원래라면 우리가 입력한 값을 입력 버퍼에 받아줬어야 함
		// 언제까지? 개행문자를 만나기 전까지
		// 원래라면 개행문자를 만나기 전까지 입력 버퍼에 값을 넣어둬야하는데 일어나지 않았음
		// 왜 일어나지 않았느냐?
		// 이걸 설명하려면 아까로 다시 돌아가야함
		// int number = sc.nextInt(); 에서 입력 버퍼에 있는 값을 number에 대입하기 위해서 엔터를 침
		// 입력 버퍼에 개행문자가 들어감(아까처럼 엔터 치면 입력 버퍼에 개행 문자가 들어감, 엔터도(개행하는것도) 문자)
		// nextInt 호출했을때도 개행문자 들어가 있긴 함
		// nextInt()는 입력 버퍼 안에서 정수값을 찾는 기능이 있음, 정수만 찾아서 들고 변수로(저장하러)넘어감, 입력 버퍼에는 개행문자가 남아있음
		// 컴퓨터는 개행문자가 남아있는 상태에서 String address = sc.nextLine(); 를 만나게 되고
		// address 변수 선언함, 오른쪽으로 넘어가면 개행 문자를 만나기 전까지 입력을 받아줌
		// 가자마자 아까 남은 개행 문자가 있음, 끝났다고 생각함
		// 사실은 출력 결과에 빈 문자열이 끼어있는 것
		// 이런 이슈가 있음
		// 스캐너 뿐만 아니라 모든 언어에서 입력받는 도구를 사용할때는 입력 버퍼에 개행 문자가 남는 이슈가 발생함
		// 모든 언어에서 발생하고 해결법도 똑같음.
		// 정수값 다음에 문자열을 입력받기 이전에는 반드시 입력 버퍼에 남은 개행 문자를 날려줘야함 그러면 해결됨
		// 어떻게 날리느냐? nextLine 메서드를 한번 더 호출함
		// 습관처럼 nextInt() 메서드를 쓸 때는 반드시 그 뒤에 개행문자를 날려주는 nextLine() 메서드 호출하고 쓸 것
		
		System.out.println(menu + " " + number + "개를 " + address + "로 배달합니다.");
		
		// 여기까지 그냥하면 주소를 입력받을 수 없음, nextLine() 메서드를 두번씩 쓰는 방법으로 해결
		
	} // 메인 메서드에서 클래스를 만들고 호출해야 함. 지금은 Run 클래스를 만들어두었으니 거기 갔다오기
	
}
