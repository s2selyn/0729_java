package com.kh.chap02.loop;

import java.util.Scanner;

public class A_For {
	
	// 맛보기
	public void method0() {
		
		/*
		System.out.println("자 월요일 힘내보아용~~");
		System.out.println("자 월요일 힘내보아용~~");
		System.out.println("자 월요일 힘내보아용~~");
		*/
		// 특정 동작을 반복 수행해야 하는 코드가 있다고 가정하자
		// 엄청 많이 해야한다면...?
		// 반복해야하는 횟수가 328765번 이라면...?
		// 이 줄을 32만번 써야 한다면...?
		// 뭐가 문제에요? 줄이 길고, 사람이 하는 일이니까 실수할 수 있음, 32만번을 다 셀 수 없음
		// 반복문은 어쩔수없이 쓰는데, 여러번 반복해야 하는데 번거로움을 줄이기 위한 방법
		
		// for는 무슨 뜻? ~을 위해(평상시), ~동안(이쪽에 의미가 더 가까운 것 같다!)
		// for문이니까 소괄호가 무조건 오겠지!
		// for문의 소괄호 안에는 총 3가지의 식을 작성함
		// 초기식, 조건식, 증감식
		for(
			int i = 0; // 정수형 변수를 하나 선언하고 0으로 초기화
			i < 5; // 조건식
			i++ // 증감식
			) {
			System.out.println("돌려돌려~~");
			// for문의 스코프 안에 반복하고 싶은 부분을 넣는다
		}
		
	} // 해봤으면 주석처리
	
	/*
	 * for문
	 * 
	 * for() {
	 * 
	 * }
	 * 반복할 때 씀, 반복해서 특정 코드를 동작시키고 싶을 때
	 * 괄호안은 반복의 횟수를 지정하는 부분(몇 번 반복시킬 것인가?, 몇 번 반복할 것인가?)
	 * 초기식; 조건식; 증감식 세 가지로 이루어짐
	 * 각각의 식은 ;; 세미콜론으로 구분함
	 * 
	 * [ 표현법 ]
	 * 
	 * for(초기식; 조건식(if문에 쓴 그것); 증감식) { // for문 블럭 지정
	 * 		반복적으로 실행하고자하는 코드;
	 * } // for문 블럭 지정
	 * 
	 * - 초기식 : 반복문을 시작할 때 "초기에 단 한번만 실행"될 구문, 초기화 할 때 그 초기(initialize)
	 * 			반복을 할 때 필요한 변수를 선언하고 초기화 하는 구문(제어변수)		=> int i = 0;(보통 이런 식)
	 * 			for문을 제어할 변수를 선언하는 것
	 * 
	 * - 조건식 : "반복문이 실행될 조건"을 작성하는 구문(if에서 많이 썼다!), 참이면 반복, 참이 아니면 반복을 멈춤
	 * 			조건식의 결과가 true일 경우 반복을 수행
	 * 			조건식의 결과가 false일 경우 반복문을 멈추고 for문 블럭을 빠져나옴 => i < 5;(조건 쓰면 끝)
	 * 
	 * - 증감식 : "반복문을 제어하는 변수에 대입된 값"을 증감하는 구문, 0이라면 계속 참이니까 반복을 무한히 하게 됨
	 * 			보통 초기식에서 선언된 변수를 가지고 증감식 작성
	 * 			이 때, 보편적으로 증감연산자를 사용함							=> i++
	 * 
	 */

	public void method1() {
		
		// 지인~~~짜 단순하게 아래처럼 출력하는 것이 목적이라고 할 때
		// 1
		// 2
		// 3
		// 4
		// 5
		// println 써서 1, 2, 3, 4, 5 입력하고 메서드 호출하면 되지 않을까?
		/*
		System.out.println(1);
		System.out.println(2);
		System.out.println(3);
		System.out.println(4);
		System.out.println(5);
		System.out.println(6);
		System.out.println(7);
		System.out.println(8);
		System.out.println(9);
		System.out.println(10);
		*/
		
		// 탈출문자 배웠는데?
		// System.out.println("1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11");
		// 동일한 결과를 얻을 수 있긴 함
		
		// 요구사항이 바뀔 수 있음, 5까지 했었는데 10까지 해달라고 하면...?
		// 10까지가 아니라면...? 20까지 해달라고 한다면...? 50까지...? 100까지...?
		// ... 해야지, 구현은 가능함
		// for문이 1958년(알골 기준)에 나왔는데... 만들어진걸 잘 사용하는 것이 올바른 방법이 아닐까?
		/*
		for(int i = 1; i <= 3200; i++) {
			System.out.println(i);
		}
		*/ // 얘를 쓰면 좀 편하겠구나!
		
		// for문이 어떤 식으로 동작하는지 알아보자
		for(/* 1 */ int i = 1; /* 2 */ i <= 5; /* 4 */ i++) {
			/* 3 */ System.out.println(i + "번 반복");
		}
		// for문에 도달하면 ~하는동안 이걸(안에 있는 걸) 좀 해야겠다
		// if 만나면 무조건 소괄호에 들어갔으니 for문도 for를 만나는 순간 소괄호 안으로 들어감
		// 소괄호 안에도 뭐가 많잖아.. 컴퓨터는 위에서 아래로 읽으면서 행을 만나면 왼쪽에서 오른쪽으로 읽음
		// 1. 자료형(Type, Java에서 제일 중요한 것!)이 정수형인 변수 i를 선언하고 공간 받음(왼쪽), 정수형 리터럴 1도 메모리상에 올라감, 정수형 리터럴 1이 i라는 변수에 들어감(대입된다, 올라간다, 적재된다)
		// 초기식은 for문에서 제일 처음에 딱 한번만 돈다
		// ; 세미콜론을 만나면 다음으로 넘어감, 조건식을 만남
		// 2. 조건식은 i가 5보다 작거나 같니? i에 들어있는 것은 1, i이 5보다 작거나 같습니까?
		// 첫 번째 바퀴에서 i에 대입된 값은 1이고, 조건식의 결과는 true가 나옴
		// 3. for문 스코프 안쪽으로 들어감, 왜? 조건식의 결과가 true니까! if문도 그랬음, for문도 마찬가지
		// 콘솔에 1번 반복 이라고 출력됨, 그 다음에 for문 블럭이 끝남
		// 끝나면 증감식으로 이동
		// 4. 증가하거나 감소해야 함
		// 첫 번째 바퀴에서 증감결과는 (i에 대입되어 있는 값이 1 증가하므로) 변수에 대입되어 있던 1이 2가 됨
		// 4번이 끝나면 2번으로 감(1번은 처음에 한번만 하고 안하는거니까)
		// 2. 이제 두 번째 바퀴, 현재 i에는 2가 대입되어 있음
		// 조건식을 확인, 2는 5보다 작거나 같은가요? true
		// 3. 2번이 끝났으니 3번으로 감, 실행결과 콘솔에 2번 반복이라고 출력됨
		// 4. 증감식으로 가니 i의 값을 1 증가하라고 하니까 i에 들어있는 값은 3으로 증가
		// 4번 끝나면 무조건 2번으로 감
		// 2. 이제 세 번째 바퀴, i에 대입된 값은 3, 3이 5보다 작니? 조건식의 결과 true이므로 3으로 감
		// 3. 3번 반복으로 출력됨(출력문의 i에는 3이 대입되어 있음), for문 블럭이 끝남, 4번으로 감
		// 4. i를 1 증가시키라고 함, 3이었던 것이 4가 됨, 4번이 끝났으니 무조건 2번
		// 2. 이제 네 번째 바퀴, i에 대입된 값이 4니까 조건식의 결과가 true, 3번으로 감
		// 3. i에 대입되어 있는 것은 4이므로 4번 반복이라고 출력됨, for문 블럭이 끝남, 4번 증감식으로 감
		// 4. 증감결과가 5가 됨
		// 2. 다섯 번째 바퀴에서 i에 대입된 값이 5, 5는 5보다 작거나 같나요? true, 3번으로 감
		// 3. 실행결과 5번 반복으로 출력됨, 4번으로 감
		// 4. i가 증가되어 6이 됨, 그다음에 2번으로 가야함
		// 2. 여섯 번째 바퀴, i가 6이 대입되어 잇음, 6이 5보다 작거나 같나요? false, 스코프 밖(for문 블럭 밖)으로 나감
		// 끝!
		
		// for문은 반복을 하는데 1번에서 시작하고 2번에서 끝남
		// 2번이 거짓이 나와야만 반복을 멈출 수 있음
		// 1-2-3-4-(2-3-4)반복-2
		
		// 자 그러면 짜잘짜잘이들
		// for문을 이용해서 반복을 3번 한다고 가정
		// 사실 무적이 아님, 변수를 선언하고 연산을 하게 되므로 극한의 성능이 필요한 부분(AI, 게임 등)에서는 일정 횟수 이상이라면 그냥 쓰는 경우도 많음(반복을 하면 연산을 해야하므로)
		// 어쩔 수 없이 사용하는 경우들이 있긴 함, 반복문이 필수는 아님, if랑 변수만 있으면 가능하긴 함
		// i, j, k
		for(/*초기식, 반복문을 제어할 변수를 선언하고 초기화하는 부분,
			일반적으로 단순한 for문의 제어변수는 무조건 i, j, k등으로 고정되어 있음
			기본 베이스는 i, 단순한 for(반복)문은 제어변수를 i로 설정하기로 암묵적인 약속
			j, k는 이중, 삼중 for문에 사용
			고대 그리스 시절 수학의 첨자부터... 옛날에는 프로그래밍을 수학자들이 하던거라 수학적인것이 붙어있음
			FORTRAN은 정수형 변수를 담으려면 i부터 담을 수 있게 되어있었음
			프로그래밍 역사적으로도 기본적으로 제어변수는 거의 무조건 i로 생각(i, j, k)
			세번 반복해야하는데, 초기화를 해야하는데,
			보편적으로 0으로 초기화함, for문을 사용하는 목적이 반복문 탈출문 이후에 배열을 배울때 많이 사용함
			배열의 index가 대부분의 언어가 0부터 시작함, 실제 컴퓨터에 값을 저장할때의 메모리 주소도 0부터 시작하기 때문에 1은 별로 안좋음*/
			int i = 0;
			/*조건식, 0, 1, 2까지 반복하고 3이 되면 false이니 안녕! 3으로 해두는것이 정확히 몇번 반복하는지 이해하기 쉬우므로 0으로 초기화하자*/
			i < 3 ;
			/*증감식*/
			i++) {
			System.out.println(i);
			// 영어권에서는 i = 0, i < 3이 베이스(권장방법)
			// 한국, 일본은 i <= 2을 선호하는 것 같다(선생님이 느끼시기에는)
			// i <= 3 - 1 이라고 쓰는 사람도 보셨다고 함
		}
		
		for(int i = 0; i < 240; i += 3) {
			System.out.println(i);
			// 보편적으로 증감식은 하나씩 증가하겠지만 반복을 어떻게 하느냐에 따라서 증감식을 다르게 작성할 수 있음
			// 증감의 전위연산, 후위연산에 따라 성능 차이가 나기도 했음, 지금은 성능차이가 거의 없다
			// 그래도 후위연산으로 하자
		}
		
		System.out.println("----------");
		
		for(int i = 100; i >= 1; i--) {
			System.out.println(i);
		}
		
	} // 해봤으면 메인 메서드가서 주석처리
	
	public void gugudan() {
		
		// 구구단 프로그램(사실 for문 배우면 구구단 아니면 별찍기 둘 중 하나)
		//
		// 사용자에게 정수를 입력받아서
		// 사용자가 입력한 정수를 이용해서 구구단을 출력해보기
		// System.out.println("하이"); // 메인 메서드 가서 호출하고오기, 해봤으면 주석처리
		
		// ※ 구구단을 외자 ※
		// 몇 단을 출력하시겠습니까 > 8
		// 8단을 출력하겠습니다
		
		// 8 X 1 = 8
		// 8 X 2 = 16
		// 8 X 3 = 24
		// ...
		// 8 X 9 = 72
		
		// 요구사항 : 사용자에게 정수를 입력받기
		Scanner sc = new Scanner(System.in); // 입력받는 도구
		// 입력을 받기 위해서 입력을 유도, 서비스 메세지 띄우기
		System.out.println("※ 구구단 프로그램 ※");
		System.out.print("몇 단을 출력하시겠습니까 > ");
		int dan = sc.nextInt();
		System.out.println(dan + "단을 출력하겠습니다."); // 잘 나오는지 확인해보기
		
		// 그 다음은?
		// 기능 만들기 전에 개발자들은 설계를 해야 함!
		// 설계하려면 기능을 써보고 이해를 해야 함, 이해를 못하면 for문을 써봤자 쓸모가 없음
		// 구구단은 출력이 어떻게 되어야하지?
		// 5라고 입력했다고 가정
		/*
		if(dan == 5) {
		System.out.println("5 X 1 = 5");
		System.out.println("5 X 2 = 10");
		System.out.println("5 X 3 = 15");
		System.out.println("5 X 4 = 20");
		System.out.println("5 X 5 = 25");
		System.out.println("5 X 6 = 30");
		System.out.println("5 X 7 = 35");
		System.out.println("5 X 8 = 40");
		System.out.println("5 X 9 = 45");
		// }
		*/
		// 이렇게 출력이 되어야 함
		// 내가 프로그램을 만드는데, 코드를 작성하는데, 지금 우리가 하려는게 구구단 만들기를 하려고 함
		// 내가 생각하는 구구단은 어떻게 돌아야 해? 를 베이스로 해야 함
		// for문을 쓰려고 코드를 짜면 안됨, 구구단을 써야하니까 for문을 써야지! 이러면 안됨
		// 문법에 사로잡히면 안됨, for 쓰고 고민하게 됨(순서를 거꾸로 하면 안된다!)
		// 사실 for문 없이도 돌림, 앞에서 이미 if문, if else문을 배웠으니 for문이 없어도 구구단은 구현 가능함
		// 출력 결과물부터 생각해야 함, 어떻게 돌아야 하는지 생각해야 함, 결과물을 생각안하고 문법에만 잡히게 됨
		// 이런게 다 익숙해지고 나서 자유자재로 쓸 수 있다, for문 어떻게 써야지 바로 생각나면 써도 됨
		// 그렇지 않으면 일단 출력 결과부터 먼저 생각하고, 순서가 바뀌고 문법에 사로잡히면 문법 괴물이 된다~
		
		// 중복되는 부분은 나중에 한다고 생각하자
		// 바뀌는 부분과 바뀌지 않는 부분을 생각하자
		// 바뀌지 않는 부분은 출력문, 1 ~ 9를 곱하는 부분
		// 나머지는 사용자가 입력한 정수값에 따라 바뀌는 부분
		// 5는 사용자가 입력한 dan으로 치환할 수 있음
		/*
		System.out.println(dan + " X 1 = 5");
		System.out.println(dan + " X 2 = 10");
		System.out.println(dan + " X 3 = 15");
		System.out.println(dan + " X 4 = 20");
		System.out.println(dan + " X 5 = 25");
		System.out.println(dan + " X 6 = 30");
		System.out.println(dan + " X 7 = 35");
		System.out.println(dan + " X 8 = 40");
		System.out.println(dan + " X 9 = 45");
		*/
		
		// 뒷부분도 바뀜
		/*
		System.out.println(dan + " X 1 = " + (dan * 1));
		System.out.println(dan + " X 2 = " + (dan * 2));
		System.out.println(dan + " X 3 = " + (dan * 3));
		System.out.println(dan + " X 4 = " + (dan * 4));
		System.out.println(dan + " X 5 = " + (dan * 5));
		System.out.println(dan + " X 6 = " + (dan * 6));
		System.out.println(dan + " X 7 = " + (dan * 7));
		System.out.println(dan + " X 8 = " + (dan * 8));
		System.out.println(dan + " X 9 = " + (dan * 9));
		*/
		
		// 목적이 구구단의 구현이 되어야지, for문의 사용이 목적이 되면 안됨
		// 첫번째 목적은 기능의 구현
		
		// 1 ~ 9 제외는 중복됨(고정값)
		// 1 ~ 9는 행마다 다른 값 --> 정수형 변수
		// 중복인 부분은 하나로 빼고, 중복이 아닌 부분은 변수로 처리한다!
		// 1부터 9까지 순차적으로 늘어나는 친구를 for문을 이용해서 손쉽게 관리할 수 있었던 것 같은데?
		for(int i = 1; i <= 9; i++) {
			System.out.println(dan + " X " + i + " = " + (dan * i));
			// 중복된 부분은 하나로 뺀다(dan, X, =)
			// 중복이 아닌 부분은 변수로 관리한다(i)
		} // 보자마자 머리속에 떠오르면 뭐 이래도 되지만 우리는 아직 연습이 필요하다!
		// 기능을 구현한 뒤에, 어떤 코드를 반복시키고 싶고, 어떤 부분을 변수로 처리하고 싶은것인지 확인한 다음에!
		
	} // 해봤으면 메인 메서드 가서 주석처리
	
		// 별찍기는 이런것들
		// ★
		// ★★
		// ★★★
		// ★★★★
		// ★★★★★
		
		//     ★
		//    ★★
		//   ★★★
		//  ★★★★
		// ★★★★★(빈 공간은 공백문자 찍으면 됨)
	
	public void method2() {
		
		// ★★★
		// ★★★
		// ★★★
		
		// 기본 베이스는 출력값을 생각해보는것
		/*
		System.out.println("★★★");
		System.out.println("★★★");
		System.out.println("★★★");
		*/
		// 이렇게 시작하자! 요구사항 지키면 할 일 끝!
		// 별이 30, 300, 3000개일 수도 있으니까
		// 이 방법은 확장성이 뛰어난 것 같지는 않다
		
		// 한 줄만 봤을 때, 별도 반복되어 찍혀있음
		/*
		System.out.print("★");
		System.out.print("★");
		System.out.print("★");
		System.out.println(); // 두줄 만들기
		System.out.print("★");
		System.out.print("★");
		System.out.print("★");
		System.out.println(); // 세줄 만들기
		System.out.print("★");
		System.out.print("★");
		System.out.print("★");
		*/
		// 위의 것을 풀어서 씀, 중복이 발생한다는 사실
		
		// (별 하나에 곱하기 3 하고 개행하기)를 세번하면 되네?
		/*
		for(int i = 0; i < 3; i++) {
			System.out.print("★");
		}
		System.out.println();
		
		for(int i = 0; i < 3; i++) {
			System.out.print("★");
		}
		System.out.println();
		
		for(int i = 0; i < 3; i++) {
			System.out.print("★");
		}
		
		System.out.println();
		*/
		// 이것도 결과가 똑같다
		
		// 그래도 for문, 개행이 반복이네
		for(int i = 0; i < 3; i++) {
			for(int j = 0; j < 3; j++) {
				System.out.print("★");
			}
			System.out.println();
		} // for문 안에 for문도 작성할 수 있고
		
		// for문 안에 if문도 작성할 수 있음
		// 출력 : X번째 반복입니다. 그냥 하는 건 쉬우니까
		// 		 10번째 반복마다 ♡를 하나씩 찍어주기
		for(int i = 0; i < 100; i++) {
			
			System.out.println((i + 1) + "번째 반복입니다.");
			// 권장사항이 0으로 초기화하는 것이므로 i는 그대로 둔다
			// (i + 1) 말고 i 그대로 넣으면 0부터 99로 출력됨
			
			// 제가하고 싶었던 부분
			// (i + 1) == 10 || (i + 1) == 20 || (i + 1) == 30
			// (i + 1) % 10 == 0
			
			// 10번째 반복마다 --> 조건이므로 if부터 써보자	
			if(/* 10번째 반복마다 */ (i + 1) % 10 ==0) {
				System.out.println("♥");
				
			}
			
		}
		
	} // 해봤으면 메인 메서드가서 주석처리
	
	public void method3() {
		
		for(;;) {
		
			System.out.println("구구단 프로그램 ~~~");
			System.out.println("1. 구구단 프로그램 시작하기");
			System.out.println("2. 구구단 프로그램 설명보기");
			System.out.println("3. 프로그램 종료하기");
			
			// 우리가 웹으로 한정짓지 않고 핸드폰 어플리케이션으로 생각하면 이것들은 한 번 프로그램을 실행하면 끄기 전까지 실행중
			// 우리가 만들고 있는 것은 한 번 실행하면 알아서 꺼짐
			// 끄기 전까지 이용할 수 있는 것을 만들어보고싶음
			Scanner sc = new Scanner(System.in); // 메뉴 입력받기
			System.out.print("메뉴를 선택해주세요 > ");
			int menuNo = sc.nextInt(); // 정수로 입력받기
			sc.nextLine(); // 입력 버퍼 비워주기
			
			// 사용자가 입력한 값에 따라서 동작을 다르게 하고싶음
			// 선택지가 두개가 있음, if랑 switch중에 뭐 쓸까요?
			// switch가 가독성이 좋다든가, 비교연산자를 안써도 된다든가, 쓸 게 줄어든다든가 이유를 갖다붙여야 함
			if(menuNo == 1) {
				gugudan();
			} else if(menuNo == 2) {
				System.out.println("구구단을 동작시켜줘용");
				System.out.println("참 재미있어용");
			} else if(menuNo == 3) {
				System.out.println("프로그램을 종료합니다.");
				return;
			} else {
				System.out.println("이런 메뉴는 없어요 ~ ");
			}
			System.out.println();
			// return 문을 만나서 메인 메서드로 돌아가기 전까지 계속 실행시켜두고 싶다면 전체를 반복문으로 감싸면 됨
			
		}
		// for문을 쓸 때 몇 번을 반복시킬까?
		// for(;;){}로 입력하면 return 문을 만나서 메인 메서드로 돌아가기 전까지 무한히 돈다
		
	}
	
}
