package com.kh.chap02.loop;

public class B_While {
	
	// for문처럼 반복할 때 쓰는 친구
	
	/*
	 * while문
	 * 
	 * [ 표현법 ]
	 * 
	 * 초기식; // 필수는 아님, 초기식이 있으려면 while문 위에서
	 * 
	 * while(조건식) {
	 * 
	 * 		반복적으로 실행하고자 하는 코드;
	 * 		증감식; // 필수는 아님, 증감식이 있으려면 while문 블럭 안에
	 * }
	 * 
	 * for문과의 차이 : 소괄호 안에 조건식만 있고 초기식과 증감식이 없음
	 * 
	 * 반복여부를 선택하는 것은 조건식
	 * while문의 조건식의 결과값이 true일 경우 반복적으로 실행하고자 하는 코드가 실행
	 * 
	 * 목적이 두개가 다름
	 * for(문법적으로 컴퓨터가 이해할 수 있게 잘 짜여져 있음) => 개발자가 반복의 횟수를 명확하게 알고 있다.
	 * while									  => 개발자가 반복의 횟수를 가늠할 수 없음.(위의 경우가 아닌 경우들)
	 * 
	 * 무한반복
	 * for(;;)의 경우 개발자들이 작업하다 말았나? 빼먹었나? 라고 생각할 수 있음
	 * while을 쓰면 무한반복으로 인식할 수 있음
	 * 
	 */

	//  9월 전까지는 while문을 무한반복의 용도로 사용할 예정
	public void method1() {
		while(true) { // 무한반복의 용도
			System.out.println("계속 반복할거예요~");
		} // terminate 버튼으로 멈출 수 있음
	} // 해봤으면 메인 메서드에서 주석처리
	
	public void method2() {
		
		// 반복할때는 초기식, 조건식, 증감식이 있어야 한다.
		// while문 선언 이전에 초기식이 선언되어 있어야 함(for문과의 차이)
		int i = 0;
		// for문은 for문이 끝나면 제어변수가 사라짐
		// while문은 while문이 끝나도 제어변수가 사라지지 않고 남아서 공간을 차지하고 있음
		
		while(i < 3) { // 조건식
			i++; // 이 순서로 쓰면 결과가 다르게 나온다, 1, 2, 3
			System.out.println(i);
			// i++; // for문처럼 증감식 넣어봤음! 0, 1, 2
		} // while문은 for문처럼 순서가 정해져있지 않고, 증감식의 위치에 따라 결과가 달라질 수 있음
		
	} // 해봤으면 메인 메서드에서 주석처리
	
	public void method3() {
		
		// 1 ~ 10까지의 정수 중 짝수의 합 출력
		// 55(10까지 수의 합)
		// 2550(100까지 수의 합)
		
		// System.out.println(2 + 4 + 6 + 8 + 10);
		// 요구사항이 있으면 본질에 집중
		// 코드 어떻게 짜지? 이러면 안됨
		
		// 중 짝수의 합 --> 조건
		// 1단계 1부터 10까지의 합계값 출력, 차근차근~
		// 반복문을 돌려서 해보자
		int i = 1; // 1부터 10까지니까 제어변수는 초기값을 1로 선언해보자, 정수형 변수 i를 선언하고 1을 대입함
		int sum = 0; // 합계를 저장해둘 변수, 정수형 변수 sum을 선언하고 초기값을 0으로 대입함
		// 정수형 변수가 2개 선언됨, 용도가 다름
		
		while(i <= 6) { // 10 될때까지 돌리는 것, 6으로 바꾸어 설명
			// System.out.println(i); // 제어변수 값이 출력됨
			
			if(/*짝수 일때만의 조건식, i를 2로 나눴을 때 나머지가 0과 같다면*/ i % 2 == 0) {
				sum += i; // 이제 while문 반복하면서 합계를 저장하는 변수에 i값을 저장해두면~
			}
			
			i++; 
		}
		// 1부터 10까지의 합을 출력하고 싶음, 55가 어떻게 나오나요?
		// 출력된 제어변수 값을 다 더하면 됨
		// 반복할때마다 1씩 증가함, 더하려면 반복이 끝난 다음에 합계를 출력해줘야함, i는 마지막에 11일텐데?
		// 아, 더해야 햐는데? 반복할때마다 i값을 더해야하는데?
		// 반복이 다 끝나면 더한 값을 찍고싶어!!
		// i는 고정시켜야 하고, i가 증가할때마다 더한 값을 어딘가에 저장시켜둬야함, 저장해놓은 것에 계속 또 더할 수 있음
		// 우리가 저장할 수 있는 것은 변수밖에 모름 --> int sum = 0;
		// 변수를 어디에서 선언해야 함?
		// while문 안에서 변수를 선언하면 while 스코프의 밖에서는 쓸 수 없음
		// 밖에서 쓰고 싶으면 while 스코프 밖에서 선언해야 함
		// 합계를 저장해둘 변수를 선언하고, while 안에서????
		System.out.println("합계 : " + sum);
		
		// 우리는 이 중에서 짝수의 합만 출력하고 싶었음
		// i가 전부 다 더하면 안됨, i가 짝수일때만 더하고 싶음
		// sum += i;를 if문으로 감싸줌
		
	} // 해봤으면 메인 메서드에서 주석처리
	// i = 6으로 설명
	// int i = 1; 정수형 변수 i를 선언, 1을 대입, 제어변수의 용도
	// int sum = 0; 정수형 변수 sum을 선언, 초기값으로 0을 대입, 합계를 저장할 용도
	// 정수형 변수가 두 개 선언된 상태
	// while문을 만났을 때 i(제어변수)로 조건식을 작성했음
	// 1은 6보다 작아서 true니 while문 내부로 진입
	// 바로 if를 만남, ()로 들어감
	// 1일 경우 나머지가 0이 아니므로 if문 안으로(블럭으로) 못들어가고, i++를 만남, i가 2로 증가
	// while문 블럭이 끝남
	// 다시 while의 조건식으로 감
	// 2는 6보다 작거나 같음, while문 블럭(스코프) 안으로 들어감
	// 들어가자마자 if를 만나고 조건식을 보니 2를 2로 나눈 나머지가 0임
	// if 블럭 안으로 들어감, sum에다가 sum + i한 값을 대입하래, 지금 sum 변수에는 0이 있음, i는 2, 0 + 2를 대입함, if블럭이 끝남, i는 1 증가(3이 됨)
	// while 블럭이 끝났으니 다시 while의 조건식으로 감
	// 3은 6보다 작음, 반복문 안으로 들어옴
	// 3을 2로 나눈 나머지는 0이 아니고 1임, if문으로는 들어갈 수 없음
	// 바로 i는 1 증가(4가 됨)
	// while 블럭이 끝남, 다시 while의 조건식으로 감
	// 4는 6보다 작음, 반복문 안으로 또 들어옴
	// 4를 2로 나눈 나머지는 0, if문 안으로 들어감
	// sum에 sum+i를 대입하래, 4 + 2 이므로 6이 대입됨
	// if 블럭이 끝나고 i는 1 증가(5가 됨)
	// 5가 된 상태에서 while문 끝나고 다시 조건식으로 감
	// 5는 6보다 작음, 반복문 안으로 또 들어감
	// 5를 2로 나눈 나머지는 0이 아니므로 조건식은 참일 수 없음, 또 if블럭 밑으로 내려가서 i가 1 증가(6이 됨)
	// while블럭이 끝나고 다시 조건식으로 감
	// 6은 6과 같음, while문 안으로 들어가서 if문을 만남
	// 마침 6을 2로 나눈 나머지가 0, 6에다가 6을 더한 것을 또 대입해달래, sum은 12가 됨
	// if 블럭이 끝나고 i가 1 증가해서 7이 됨
	// while 조건식으로 가니 결과가 거짓임, while문 블럭을 나감
	// "합계 : "와 sum에 대입되어 있는 값을 출력해줌
	// 내가 기존에 사용하던 값을 건드리지 않고 새로운 연산 처리를 하고싶다면 반드시 이 값을 저장해둘 공간이 필요함, 지금 우리는 이것을 변수로 사용하고 있음
	
	public void method4() {
		
		// 보통 합계를 저장할 변수는 sum이라고 이름짓고 사용함
		// 합계 하면 sum으로 가야겠다 무지성으로 해도 됨
		
		// 1부터 시작해서
		// 1 ~ 10사이의 랜덤한 정수까지를 모두 더한 합계를 출력
		// 1   3
		// 1 2 3
		// 1   5
		// 1 2 3 4 5
		// 랜덤한 숫자를 생성해서, 그 숫자까지의 합계를 출력하려고 함
		// random : 무작위한 숫자 만들기
		// 자바에는 Random이라는 클래스가 존재
		// Math라는 클래스가 가지고 있는 random()를 호출해서 만들어 볼 예정
		// 원래라면 1. import, 2. 별칭짓기
		// Math math = new Math(); // 얘도 특이 케이스라서 이렇게 안씀
		// 클래스명 쓰고 메서드 호출해서 사용함
		// Math.random(); // 찍어봐야겠죠~
		// System.out.println(Math.random()); // 실행할때마다 숫자가 다르게 나옴
		// 0.6016487984137687 (double type 값, 실수)
		// 0.40614986344566384
		
		// random()의 결과값(기본적으로) : 0.0 ~ 0.9999999999999999(random을 호출하면 이런 식으로 값이 나옴)
		// 우리는 random으로 1부터 10 사이의 정수를 만들어야 함
		
		// int num = (int)Math.random(); // 전부 0이 나옴
		
		// 1단계. random() 호출 결과 체크
		double num = Math.random();
		// System.out.println(num);
		// 1 ~ 10
		
		// 2_1. num에 10을 곱하면??
		// 		0.0 ~~~~ 9.9999999999999999
		// System.out.println(num * 10);
		
		// 2_2. int형으로 강제형변환 --> 소수점 아래가 날아감
		// 		0 ~~~~ 9
		// System.out.println((int)(num * 10));
		// num에 10을 곱한 것을 int로 바꾸어야 함, num을 먼저 int로 바꾸면 0이 되고, 거기에 10을 곱하게 되어 어차피 0이 됨
		
		// 만들고싶었던 것은 1부터 10까지였으므로
		// 2_3. + 1
		// 		1 ~~~~ 10
		
		int randomNum = (int)(Math.random() * 10) + 1;
		System.out.println("가공이 끝난 무작위 정수 : " + randomNum);
		// 수학 공식으로 만들어서 외워도 됨
		// (int)(Math.random() * 몇개의 랜덤값) + 시작값;
		// + 1은 시작값, + 10이면 10부터 시작, +100이면 100부터 시작(정수 몇부터 랜덤한 값을 만들어낼것인가)
		// 몇개의 랜덤값 --> 범위를 몇개를 할거냐, 몇개의 랜덤값을 만들어낼거냐, 곱하는 갯수가 시작값으로 부터 어느정도의 범위까지 할 것인가(1부터 100까지 하고 싶으면 100을 쓰고~)
		// 10을 곱한게 아니라 2를 곱했다면 1.8 + 1이니 2가 됨
		
		// 3단계. 누적합계 구하기(목적)
		// 1부터 랜덤한 수 (1 ~ 10)까지(몇일지는 모름)를 모두 더한 합계
		int i = 1; // 시작값, 제어변수
		int sum = 0; // 합계 더해야 하니까
		
		// while문의 조건 : 1부터 10까지중 무작위까지 반복하겠다.
		while(i <= randomNum) { // i가 randomNum보다 작거나 같다면
			sum += i; // 합계에다가 i를 더한 값을 대입하고
			i++; // i값을 증가시켜서
		}
		System.out.println("1부터 " + randomNum + "까지 더한 결과 : " + sum); // 출력!
		
	} // 해봤으면 메인 메서드에서 주석처리
	
	// 로또 번호 만들기
	public void lotto() {
		
		// 로또 번호 생성기 ver_0.1
		// 범위 : 1 ~ 45
		// 6개 선택
		// 1 ~ 45 정수 중 랜덤한 수 하나만 뽑아 내려면? --> random 메서드
		// Math.random() * 45; // 외워서 공식처럼 써도 된다고 했음
		// 총 45개 범위를 얻고 싶음(* 45) --> (Math.random() * 45)
		// 0.0 ~ 44.999999999 --> 정수로 바꿔줘야 함 --> (int)(Math.random() * 45)
		// 0 ~ 44 --> + 1 --> 1 ~ 45
		int num1 = (int)(Math.random() * 45) + 1;
		int num2 = (int)(Math.random() * 45) + 1;
		int num3 = (int)(Math.random() * 45) + 1;
		int num4 = (int)(Math.random() * 45) + 1;
		int num5 = (int)(Math.random() * 45) + 1;
		int num6 = (int)(Math.random() * 45) + 1;
		
		System.out.println("이번주는 이걸로 사야겠다 > ");
		System.out.printf("%d, %d, %d, %d, %d, %d", num1, num2, num3, num4, num5, num6);
		
	} // 해봤으면 메인 메서드에서 주석처리
	// 중복, 정렬, 변수 6개 귀찮음... 나중에 보완할 수 있겠지?
	// 컴퓨터로 만드는 것을 임의 난수라고함, 중요한 것에 쓰지 않는 것이 원칙(권장사항에 써있음, 중요한 것에 랜덤 메서드를 쓰지 마라)
	// 성능이 좋은 컴퓨터가 있다면 만들어지는 수를 예상할 수 있음, 조작 할 수 있음(계산, 예측, 연산이 가능함)
	// 로또 추첨은 어떻게 함? --> 물리적으로 돌아가는 공을 사람이 뽑음
	// 월드컵 조 추첨도 사람이 뽑음
	// OTP에는 랜덤 쓸 수 있지만 금방 만료됨, 짧은 시간에 예측 불가능한 수준
	
	/*
	 * do-while(while문의 아종, 알아만 두세요)
	 * 
	 * while문은 조건식이 true여야 동작함, true가 아니면 진입할 수 없음
	 * do-while은 별도의 조건검사 없이 무조건 한 번은 실행!!!!!!!!!!!!!!!!!!
	 * 조건이 true값이 아니더라도 한 번은 꼭 수행!!!!!!!!!!!!!!!!
	 * 
	 * [ 표현법 ]
	 * 
	 * 초기식; // 필수 X
	 * 
	 * do {
	 * 		실행할코드;
	 * 		증감식; // 필수 X
	 * } while(조건식);
	 * 
	 * do가 붙은 것 빼고는 while문과 같음
	 * 
	 */
	
	public void method5() {
		
		/*
		while(false) {
			System.out.println("먼데 이건"); // 들어가지도 못하는거 왜 써놨는데! 아무 의미 없는 코드
		}
		*/
		
		do { // 일단 해봐~ 일단 한 번 돌아봐~ 일단 한 번 해봐~
			System.out.println("나는 한 번은 돌아~~");
		} while(false); // while이 true건 false건 일단 한 번은 돌아감
		
	}
	
}
