package com.kh.chap01.condition;

import java.util.Scanner;

public class B_Else {
	
	/*
	 * 그냥 else가 아니고 if(만약에)-else(그게아니고)문
	 * 그동안은 참일 경우에 실행할 코드를 작성하고, 거짓일 경우에 실행할 코드를 새로운 if문으로 작성했음
	 * 
	 * if ~ else
	 * 
	 * [ 표현법 ]
	 * 
	 * if(조건식) {
	 * 		조건식의 결과가 true였을 때 실행할 코드			- a
	 * } else {
	 * 		조건식의 결과가 false였을 때 실행할 코드			- b
	 * }
	 * 
	 * 위에 조건이 true가 아니었다면 else를 만들어서 true가 아니었을 경우에 수행하고 싶은 코드들을 스코프 안에 작성할 수 있음
	 * 
	 * -> 조건식의 결과가 true일 경우 a를 실행
	 * -> 조건식의 결과가 false일 경우 b를 실행
	 * 
	 */

	// 공부해야 하니까 메서드를 하나 선언합시다
	public void method1() {
		
		// 사용자에게 정수를 입력받아서 0보다 큰지 아닌지 판별 후 출력
		// 제일 처음 해야 할 일은 사용자에게 정수를 입력받아야 하는 것이므로 스캐너가 필요
		Scanner sc = new Scanner(System.in); // import 수행(Ctrl + Shift + o)
		
		// 정수값을 입력받고 싶으니까 정수값을 입력해달라고 하자
		System.out.print("정수 주세요 > ");
		
		// 정수를 입력받아야 하니까 + 입력받은 정수를 담아야 하니까 변수 선언과 초기화
		int num = sc.nextInt();
		
		// 모범시민 특
		// System.out.println(num); // 확인했으면 주석처리
						
		// 실행하고 싶으니 메인메서드 다녀오기
		
		// 0보다 크다면? --> 조건이다! --> if 먼저 써야지(일단 한달은 이렇게 하자)
		// 조건: 사용자가 입력한 정수가 0보다 클 경우
		// 사용자가 입력한 정수는 num을 봐야 알 수 있음
		// 비교 대상은 0
		// 무슨 비교를 해야 하지? 대소비교, 써야 할 연산자는? >
		// 따라서 조건식은 num > 0
		if(num > 0) {
			System.out.println("입력값이 0보다 큽니다!"); // 사용자가 입력한 정수가 0보다 클 경우 이렇게 출력하고 싶음
		} else { // 사용자가 입력한 정수가 0보다 클 경우가 아니라면 이렇게 출력하고 싶음
			System.out.println("입력값이 0보다 크지 않습니다!");
		} // 33을 입력한 경우, if 스코프가 끝나면 else로 가지 않고 여기로 옴
		// if와 else는 세트
		// 조건 검사를 하면 true 아니면 false로 결과가 나올텐데
		// 참일 경우에는 if블럭 안에 있는 것을 수행
		// 참이 아닐 경우에는 else블럭 안에 있는 것을 수행
		// else 단독으로 나올 수는 없음
		
		/*
		if(!(num > 0)) {
		System.out.println("0보다 크지 않아용~~");
		}
		 */
		// if문만 배웠을 때는 거짓일 경우에 수행할 일을 if를 한번 더 써서 구현했음
		// if를 만나면 일단 조건식에 들어가서 연산을 해야 함
		// 참일 경우에는 이미 0보다 큰 판별을 하는 연산을 하고, 스코프 안을 수행하고 나왔어도
		// 거짓일 경우에 수행할 일을 구현해둔 if를 만났기 때문에 또 판별하는 연산을 함
		
		// if문의 조건식의 결과가 true일 경우 => else블럭을 건너 뜀
		// 불필요한 연산이 줄어듬 => 처리속도가 향상
		
	} // 다 해봤으면 메인 메서드 가서 주석처리
	
	// if else는 모 아니면 도 느낌인데..
	// 더 여러가지 선택사항이 있으면 번거롭다
	// 조건이 아주 많이 달렸을 경우에는 다른 문법을 쓸 수 있음
	
	/*
	 * if ~ else if문
	 * if로 시작은 해야 함
	 * 
	 * [ 표현법 ]
	 * 
	 * if(조건식1) {
	 * 		조건식 1이 true일 경우 실행할 코드
	 * } else if(조건식2) { // 조건식 1이 true가 아닐 수 있음, 다른 조건을 또 달고싶은 경우(근데 대부분의 경우 if else만으로 해결이 됨)
	 * 		조건식 2가 true일 경우 실행할 코드
	 * } else if(조건식3) { // 또 조건을 달고 싶음
	 * 		조건식 3이 true일 경우 실행할 코드
	 * } else if(조건식4) { // 조건을 달고 싶은 만큼 쭉쭉 달 수 있음
	 * 		조건식 4가 true일 경우 실행할 코드
	 * } else {// 전부 아닐 경우 뭔가 하고싶을 수 있지... 메뉴가 10개라서 if else를 10개 해뒀는데 10개가 다 아닐 경우
	 * 		앞에서 기술했던 모든 조건들이 false일 경우 실행할 코드
	 * }
	 */
	
	public void method2() {
		
		// 정수를 입력받아서 0보다 큰지 / 0인지 / 0보다 작은지 출력
		Scanner sc = new Scanner(System.in); // 무조건 있어야 함
		System.out.print("정수 입력 바람 > ");
		int num = sc.nextInt();
		// System.out.println(num); // 메서드 호출해야 쓸 수 있으니까 Run 클래스의 메인 메서드 가서 호출
		// 확인했으면 주석처리
		
		// 총 3개의 if문을 만들어서 작업을 수행해야 했음
		// 무조건 if를 만나면 괄호 안에 들어가서 연산을 한번씩 해야 함
		/*
		if(num > 0) System.out.print("0보다 커요~");
		if(num == 0) System.out.print("0이예용~");
		if(num < 0) System.out.print("0보다 작아용~");
		*/
		
		// 무조건 대장 if부터 시작
		// 이 친구 실습하고나서 다시 돌아보기
		// 체크해야 하는 값의 범위는 0이냐, 0보다 크냐, 0보다 작냐
		
		/*
		if(num == 0) {
			System.out.println("0입니당~");
		} else if(num < 0) {
			System.out.println("0보다 작습니당~");
		} else {
			System.out.println("0보다 큽니당~");
		}
		*/
		// 일반적으로 생각했을 때 정수 입력해달라고 하면 양의 정수를 입력할 확률이 큼
		// 지금은 0과 비교를 먼저 하고있음
		// 30을 입력한 경우에는 else 블럭까지 들어감
		// 결과를 얻기 위해 연산을 두번 해야함
		// num > 0 을 첫번째 조건으로 넣어뒀다면 한번만 연산을 하고 나왔겠지
		// 다루려는 값의 형태, 범위를 생각해서 조건식을 작성하자
		// 위쪽에 최대한 많은 경우의 수가 포함될 수 있도록, 가장 적게 들어오는 친구가 밑으로 내려가도록
		if(num > 0) {
			System.out.println("0입니당~");
		} else if(num < 0) {
			System.out.println("0보다 작습니당~");
		} else {
			System.out.println("0입니당~");
		}
		// 개발자의 생각마다, 특정 조건에 따라 달라질 수 있음
		
	} // 다 해봤으면 메인 메서드 가서 주석처리
	
	public void ageCheck() {
		
		// 사용자에게 나이(정수)를 입력받고
		// 입력받은 나이에 따라서 각기 다른 내용을 출력해주세요.
		// 어린이 청소년 성인
		// 1 ~ 12 : 어린입니다.
		// 13 ~ 17 : 청소년입니다.
		// 18 ~	   : 성인입니다.
		// 0, -    : 외계인입니다.
		
		Scanner sc = new Scanner(System.in);
		System.out.print("나이를 입력해주세요 > ");
		int age = sc.nextInt(); // 여기까진 고정
		// System.out.println(age);
		
		// age에 사용자가 입력한 정수값이 들어있음
		// 1. if else if문
		// 사용자가 입력한 값이 1 ~ age ~ 12라면 어린이라고 출력해주면 되겠구나~
		// 1 <= age <= 12는 자바에서 한번에 할 수 없음, 순서대로 연산이 일어나고, 처음 연산 이후에는 자료형이 다름 
		if((1 <= age) && (age <= 12)) {
			System.out.println("어린이 입니다!");
		} else if((13 <= age) && (age <= 17)) {
			System.out.println("청소년 입니다!");
		} else if(18 <= age) {
			System.out.println("성인 입니다!");
		} else {
			System.out.println("올바른 값을 입력해주세요.");
		}
		// 우리가 연산해야 값은 age였음
		// 연산해야 하는 것은 1 ~ 12 사이인가? 값의 형태 12개가 부합함
		// 13 ~ 17 사이인가? 값의 형태 5개가 부합함
		// 18 ~ 넘어가는가? 값의 형태 셀 수 없음(int라는 가정하에 뭐 21억개쯤이겠지만)
		// 0 >= 인가? 값의 형태 셀 수 없음
		// 마지막에서 1 이상의 값은 다 빠졌으므로 else 블럭을 쓸 수 있음
		
		// 값의 범위에 대해 생각해보자
		// 0 >= 조건에서 가장 많은 범위의 값이 존재하므로 제일 먼저 빼버리면 어떤가?
		if(age < 0) { // 만약에 0 이하의 값이 들어왔다면 여기에서 다 빠져버림
			System.out.println("올바른 나이를 입력해주세요.");
		} else if (age >= 18) { // 그 다음으로 많은 값의 범위를 가진 조건
			System.out.println("성인 입니다.");
		} else if (age <= 12) { // 여기까지 왔다는 것은 12보다 같거나 작기만 하면 첫번째 조건에서 다 빠졌기 때문에 1부터 12까지 포함됨
			System.out.println("어린이 입니다.");
		} else { // 이미 위에서 가능한 값이 조건에 의해 제외되었으며 가능한 남은 값은 어차피 13 ~ 17뿐
			System.out.println("청소년 입니다.");
		}
		// 일반적으로 if else문을 작성할 때 고민을 많이 해보는 것이 좋음
		// 결국 목적중의 하나가 불필요한 연산횟수를 줄이는 것
		// 불필요한 연산횟수를 줄이기 위한 전제조건은 최대한 위쪽에서 연산을 많이 처리해줘야 아래쪽에서 위쪽에 포함되지 않은 연산을 할 수 있음
		// 위에서 작성한 것보다 조건식이 더 직관적임
		
	}
	
}
