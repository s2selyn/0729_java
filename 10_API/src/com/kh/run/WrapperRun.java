package com.kh.run;

public class WrapperRun {

	public static void main(String[] args) {
		
		/*
		 * Wrapper Class
		 * => 기본자료형을 (객체)참조자료형으로 포장해주는 클래스들을 래퍼클래스라고 함
		 * 감싸주기 포장하기, 포장용도의 클래스
		 * 
		 * 기본 자료형						Wrapper Class
		 * 			<--------------->
		 * boolean						Boolean
		 * char							Character
		 * byte							Byte
		 * short						Short
		 * int							Integer
		 * long							Long
		 * float						Float
		 * double						Double
		 * 
		 */
		
		// 각각의 기본자료형을 포장클래스들을 이용해서 포장할 수 있다!
		// 기본자료형을 객체로 취급해야 하는 경우
		// 예를 들어서 자바 API 클래스를 쓰다가
		// Object obj = new Object();
		// obj.
		// 메소드 매개변수 자료형이 기본자료형을 안받는 경우, Object 타입을 가지고 뭘 쓰는데 equals를 쓰고싶은데, equals는 매개변수 타입이 Object임
		// 매개변수 타입이 Object라는것은? 오브젝트는 모든 클래스의 최상위 부모클래스이기 때문에 다형성을 적용해서 모든 타입의 친구가 다 들어올 수 있음 --> 참조자료형 이야기
		// 기본자료형은 없잖아, 변환될 수 없잖아.. 뭔가 기본자료형을 못쓰는 상황임
		// 메소드 매개변수 자료형이 기본자료형이 아닌 참조자료형만 사용 가능한 경우 --> 이런 경우에 래퍼 클래스로 포장을 해서 보통은 다형성을 적용해야함, 이런 경우에는 래퍼클래스가 필요하다!
		// 다형성을 적용해야겠다!!!!
		
		// 기본자료형 두개가 있으면, 메소드 호출할 때 막히는 부분들이 많아서 이친구들 포장을 해야겠다! 이런 상황
		int num1 = 10;
		int num2 = 15;
		
		// 포장해서 오브젝트 클래스의 멤버인 equals 메소드를 호출해서 써봐야겠따
		// Object.equals()
		
		// int형을 포장할 수 있는 건 Wrapper 자료형은 Integer 클래스
		// 생성자 매개변수로 넘길 수 있음
		// Integer i1 = new Integer(num1); // 까만 취소선 생김, 아까 스트링 객체 new 해서 만드는거나 똑같은 행위임(heap에 올리는 것), 이런 작은 숫자들 상수풀에 올리고싶음, 똑같은거 올라와도 메모리 낭비 안되게!
		// The constructor Integer(int) has been deprecated since version 9 and marked for removal
		// 지금은 이거 써도 쓰는데, 버전을 더 올리면 이 문법 자체를 없앨거니까 못쓰게될 확률이 크니까 웬만하면 다른 문법으로 바꿔서 쓰라고 이런 문법은 웬만하면 쓰지마라고 알려주는 거고, 돌아가긴 돌아감, 비권장방법
		// System.out.println(i1);
		
		// 기본자료형 => Wrapper로 포장
		// 스트링 할때랑 똑같이! Integer로 선언한 다음 그냥 대입하면 끝
		Integer i1 = num1;
		Integer i2 = num2;
		// 그러면 이친구들 참조자료형으로 포장한것! 128 미만의 정수값은 다 아까봤던 상수풀에 들어가기때문에 똑같은 값이면 똑같은 주소를 가리키고 있어서 메모리적인 측면도 낭비를 덜할수있다는 장점이 있음
		// 참조자료형이 되었기때문에 메소드같은것도 오브젝트의 후손이 될테니까 사용할수 있게됨
		System.out.println(i1.equals(i2));
		System.out.println(i1.compareTo(i2)); // --> -1 이라고 반환됨
		// 많이 쓰는게 이런거! (매개변수 자리에)인자가 Integer 타입의 anotherInteger 를 넣어달라고 적혀있음, 반환 타입은 int, 비교할때 사용, 보통 자바가지고 자료구조이용해서 정렬같은거할때 사용
		// a.compareTo(b)
		// a가 b보다 크면 1을 반환
		// a가 b보다 작으면 -1을 반환
		// 같으면 0반환
		
		// 래퍼 클래스 중요한데 어려운건 아님, 객체 참조자료형으로 바꾸는 포장하는 것! 언제 많이 씀?
		// 웹에서 데이터를 받았는데 문자열로 받는 경우가 많음, 문자열로 들어오고
		// 정수를 받아도 "123", 실수를 받아도 "1.1", 타입이 스트링임, 타입이 스트링으로 와버림
		String str1 = "10";
		String str2 = "1.1";
		
		// 정수값이 오고, 실수값이 오는데 자료형이 스트링, 근데 우리가 숫자값을 받았다는 것은 얘를 문자열로 쓰고싶은게 아님.
		System.out.println(str1 + str2); // --> 101.1
		
		// 우리가 원하는건 정수 10이랑 실수 1.1인데, 문자열 더하기 문자열이니까 붙어버림, 이렇게 쓰고싶은게 아님
		// "10"은 정수의 형태로, "1.1"은 실수의 형태로 바꿔줘야함, 그게 되나?
		// String 타입을 int로 바꿀 수 있나요? ㄴㄴ 캐스팅 안됨 String은 참조자료형이고 int는 기본자료형인데!
		// 이런 상황에도 Wrapper Class를 써야함
		// 이런 상황에서는 캐스팅이 아니고 파싱을 해줘야함
		// 파싱(parsing) == 특정 데이터를 규칙에 따라서 분석하고 해석하는 과정
		// 캐스팅과는 전혀 다른 개념
		// "10"의 문자열에서 정수형태의 값만 분석해서 정수형태의 모양으로 값을 뽑아내고싶음 --> 그럴 때 필요한게 래퍼클래스
		// 정수형(int)으로 뽑아내고싶으니 정수클래스(int의 래퍼클래스인 Integer) 사용, Integer 클래스를 참조하면 스태틱 메소드로 parseInt라는 메소드가 있음 --> parseInt의 인자로 문자열을 전달
		// 이렇게 넘어온 데이터를 가지고 Integer는 str1로부터 문자열이 왔는데 이거를 내가 정수 규칙에 따라서 정수로 해석해서 반환해줘야지! 하고 int 값으로 파싱해서 반환해줌
		int i = Integer.parseInt(str1);
	
		// 실수도 해보자, "1.1"도 문자열인데, 실수 규칙에 따라서 실수로 해석을 해서 사용하고 싶음 --> 파싱이라는 작업을 해줘야함!
		// 실수는 기본형 뭐 쓰나요? double! 더블형으로 파싱할거니 더블의 래퍼클래스인 Double 클래스를 씀, 클래스를 참조해보면 parseDouble이 있음
		double d = Double.parseDouble(str2); // 래퍼클래스 전부 파싱메소드가 있음
		// 파싱하고 싶은 해당 래퍼클래스명을 적고, 파스 뭐시기 하고 데이터를 전달하면 데이터를 파싱해서 전해줌
		// 해당 Wrapper클래스이름.parseXXX(데이터);
		
		System.out.println(i + d); // 이제 파싱이 되었으니까,,, 근데 int랑 double로 자료형 다른데 두개 왜 더해짐?
		// 11.1이 나옴, 실수 + 실수해야 나오는건데? 자바에서는 10과 1.1을 더하는 동작이 일어날 수 없음 --> 결론을 놓고 유추하면 1.1이랑 더할 수 있는 것은 10.0밖에 없음
		// d가 double이니까 i가 double로 바뀜, (double)i로 우리 눈에만 안보이고 자동으로 들어가있음, 10이 10.0이 되어야만 1.1과 더할 수 있음, 아니면 더하기 불가!, 정수와 실수의 더하기는 일어날 수 없다!
		
		// int i 다시 스트링으로 바꾸고싶다면
		// String strInteger = i; // i 대입하는 이건 안됨, 기본자료형을 스트링으로 대입불가
		// i 가 왼쪽에 들어가기 위한 전제조건은? 왼쪽은 이미 스트링으로 정해졌음 --> 오른쪽을 스트링으로 해줘야함! 자료형이 같아야 들어가니까 --> 스트링으로 만드려면?
		// (String)i는 안됨, i는 기본자료형이고 이건 클래스캐스팅이고, 기본자료형이 스트링으로 바뀔 수 없음
		// String strInteger = i + ""; // 정수와 빈 문자열을 더해서 문자열 정수가 됨. 이건 야매
		String strInteger =  String.valueOf(i);// 이게 근본, char형 배열 스트링으로 바꿨던것처럼 valueOf 사용해서! String의 valueOf 사용! 이러면 다시 String으로 됨
		// valueOf 까보면 Integer.toString(i)해서 스트링 타입 결과 돌려받는것 --> 사실 이것도 래퍼클래스의 메소드 호출해서 사용하는것
		
	}

}
