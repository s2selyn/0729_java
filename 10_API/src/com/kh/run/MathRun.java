package com.kh.run;

	// import java.lang.*; 이게 생략되어있다, 모든 클래스는 Object의 자식클래스!
	// 복습을 합시다~~~~
	// 클래스를 외부에서 사용하려면 임포트해야함, 오브젝트, 수학, 스트링 등은 임포트절을 하지않아도 사용할수있음
	// 이친구들은 어딘가에 import절이 들어가있다는거겠지! 공통점은 import java.lang.*; 이곳에 들어있는것
	// 나중에 어떤 클래스를 사용할 때 import 안해도 사용이 가능하네? 하다면 얘도 java.lang 패키지에 있겠네 하고 유추가능! --> 사고의 흐름! 시간이 걸리긴해

public class MathRun extends Object {

	public static void main(String[] args) {
		
		// Java API, 이번 프로젝트 주인공! 현실세계에서도 꽤 보이는듯?
		// Application Programming Interface
		// 인터페이스는 배웠다! 경계면, 매개체! 프로그래밍은 우리가 하는 만드는일! 어플리케이션은 응용프로그램(핸드폰 앱같은거)!
		// 응용프로그램을 만들때 사용하는 인터페이스
		// 자바라는 프로그래밍 언어로 응용프로그램을 만듦(시스템빼고 다 응용이니까) --> 어려운 부분들이 있음(입력받는거, 문자열 담아서 활용하는것들) --> 왜? 문자열의 크기와 길이를 지정할수없음
		// 상관없이 쓸 수 있어야함, 이런 형태가 필요함, 언어차원에서 기본자료형으로 해둘수는 없음, 다른 언어들은 문자열을 만들 때 final 붙은 char형 배열로 만들어버림
		// 문자열은 문자를 순서대로 나열한것이므로 char형을 여러개 쓸거니까 배열로 쓴 것
		// 자바를 처음 하는 시점에 char형 final 붙여서 만들어서 사용하는게 가능할까..ㅎㅎ 어쨌든 문자열을 써야하니까 언어적인 차원에서 자체적으로 만들어서 인터페이스로 제공해줌
		// String을 할건데, 이아이의 정체는 byte형 배열임, 자바8까지는 char형 배열이었고, 자바9부터는 byte형 배열이 되었음
		// 문자열을 다룰 때 이건 final이 붙은 byte형 배열이야, 하고 쓰진 않음.. String도 하나의 인터페이스, 나와 자바 사이에서 문자열 쓸 때 도와줌
		// 입력을 받아야해, 입력은 우리가 키보드로 받고있음, 메인보드에 꽂혀있음, 메인보드는 OS(커널)을 거쳐야함, 실제로 우리는 OS에 딸린 이클립스에서, 그안에서는 자바에서 다루고있음
		// 전부 소스코드인데, 내가 입력받는 무언가를 만들어야지 생각했을때 메인보드에서부터 전부 코드를 만들수는 없음
		// 자바라는 언어에서는 언어적인 측면에서 입력받는게 필요하면 Scanner 줄테니까 이거 쓰면 돼~ 하고 제공해줌
		// 여태 Scanner 쓸때 안에 뭐있는지 예외있는지 없는지 신경안쓰고 사용법만 가지고 썼음, 스캐너도 자바라는 언어로 개발할때 나와 키보드 사이의 인터페이스 역할을 한 것
		// API도 사용되는 범위가 넓어져서 다른 종류의 API도 배워야함, 우리가 지금 하는건 Java라는 언어에서 용프로그램을 만들때 좀더 수월하게 만들 수 있도록 제공되는 인터페이스
		
		// 자바로 뭐 할거야? 근데 수학적인 뭐 할거야? 그럼 이거 사용해! 하고 제공해주는 클래스(인터페이스)를 배워보자~
		// Math 클래스(수학)
		// 랜덤 메소드 호출할때 써봤음, 클래스 쓰고 참조해서 썼음
		// Math.random();
		
		// Math math = new Math();
		// 원래라면 이렇게 썼을텐데 안됨 --> The constructor Math() is not visible --> 있긴 있다는 뜻, 까보러감, 기본생성자가 private임
		// 왜그럴까? 필드들이 있는데 전부 상수필드, 대문자, 초기화가 되어있음 --> static 영역에 올라갈것이다!
		// 필요하면 메소드 호출해서 쓸 수 있음, 그러라고 인터페이스 만들어준것 --> 메소드도 static이 붙어있음
		// Math의 모든 멤버가 static임 --> 수학 클래스의 모든 멤버는 static에 올라가므로 heap에 생길 필요가 없음 --> 그러므로 heap에 올라가지 않도록 기본생성자를 숨긴 것
		/*
		 * - 모든 필드와 메소드가 전부 다 static
		 * - 객체를 생성할 필요가 없으므로 기본생성자의 접근제한자가 private
		 * - java.lang
		 * 
		 * - import도 안했다, 왜? java.lang 패키지에 있음, 이 패키지에 있는 전부는?
		 * Object 어딨는거임? java.lang, String도? java.lang에 있음 
		 * 
		 */
		
		// 필드
		// 파이 => Math클래스 내에 상수필드로 정의되어있음
		// 상수필드이므로 클래스에 직접접근해서 사용할수있음(public static이니까)
		System.out.println(Math.PI);
		
		// 메소드(자바에서 소수점자리 처리하는건 좋은게 아니지만.. 쓸일이 있을수도 있지)
		// 1. 제곱 => Math.pow()
		// 실수값으로 올림, 내림, 반올림 이런거 할때 쓸법한 친구들
		// 이런거 있구나~ 써보고 나오는거 확인만 해보면됨
		System.out.println("2의 10제곱 : " + Math.pow(2, 10));
		
		// 2. 절대값 => Math.abs(int, double, long, float)
		// 오버로딩이 잘 되어있음
		System.out.println("절대값 : " + Math.abs(-33));
		
		double num = 8.141414;
		
		// 1. 올림 => Math.ceil(double) : double
		System.out.println("올림 : " + Math.ceil(num));
		// double형 값을 받아서 올림처리하는 메소드, 반환타입도 double
		
		// 2. 버림 => Math.floor(double) : double
		System.out.println("버림 : " + Math.floor(num));
		
		// 3. 반올림 => Math.round(double) : long
		System.out.println("반올림 : " + Math.round(num));
		// 언어라면 이런걸 다 제공해줌, 똑같은 이름으로 제공, 한번 써보면 같은 이름으로 있으니까 다른 언어에 가서도 쓸 수 있음
		
	}

}
