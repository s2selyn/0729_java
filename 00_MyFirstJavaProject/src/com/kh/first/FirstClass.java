package com.kh.first; // 패키지 선언부 : 현재 클래스의 위치, 어떤 패키지에 존재하는지

	/*
	 * 주석(Comments)
	 * 
	 * 주석은 프로그램을 실행하는데 있어 아무런 영향을 끼치지 않음!
	 * 코드를 작성한 후 작성한 코드를 이해하기 쉽도록 하기 위함
	 * 주석을 달아놓으면 유지보수 시간을 줄일 수 있음, 유지보수가 최우선, 사람이 보기 좋게 만들어야 함
	 * 
	 * 주석의 종류(3가지 / 오늘은 2가지만)
	 * 
	 * 1. 한 줄 주석(//) : 주석 내용이 한 줄 일때 사용
	 * "//"이후부터 행의 끝까지 모든 내용을 주석으로 간주
	 * 
	 * 2. 여러 줄 주석("/* ~~~~*") 여러 줄의 주석이 필요할 때 사용
	 * "~~~~~~" 사이의 모든 내용이 주석으로 간주
	 */

	/*
	 * 패키지(package)
	 * 
	 * 
	 * 하나의 패키지 안에 여러 개의 클래스들이 존재할 수 있음
	 * 단, 하나의 패키지 안에 동일한 이름의 클래스는 존재할 수 없음
	 * 
	 * 프로그램을 만들 때 모든 클래스들을 동일한 패키지에 생성하여 관리하면 복잡하기 때문에
	 * 클래스들을 용도에 맞게 구분해서 패키지에 보관하는 것을 권장한다.
	 * 
	 * 권장사항
	 * 
	 * 패키지는 적어도 세 단계 이상으로 만들어주는 것을 권장함.
	 * ex ) com.kh.first
	 * 
	 * com.(회사이름).(프로젝트이름/팀이름/카테고리이름), 회사마다 정해진 naming convention 대로 만들면 됨
	 */

/**
 * 얘는 당장 쓸 것은 아님
 */

public class FirstClass { // 클래스 이름을 FirstClass라고 지었음 { Scope(블록), 클래스를 구성하는 구성요소가 들어가는 부분 }, 예약어(keyword)는 자주색(보라색) -> 식별자로 사용 불가, public은 외부에 노출되어 있으며 접근 가능 누구든지 사용 가능, class는 내가 누구인지 설명함, FirstClass는 내 이름 
	
	// Scope(블록) {  } 은 중괄호로 묶은 부분을 이야기하며, 복합문을 구성하는 요소이다!
	// 즉, 종속된 문장이 다수 개일 때 '{' 로 시작하고 '}' 로 닫습니다.
	
	// main method : 프로그램의 시작점, 프로그램 당 1개는 가지고 있어야함, entry point(ep); 어디에 존재하는 FirstClass가 불려올것인지가 필요하므로
	// 고정된 형태를 가짐
	public static void main(String[] args) { // 여기부터 컴퓨터가 읽어서 무조건 위에서부터 아래로 한줄씩 흐름
		// System.out.println("Hello World!");
		
		// 컴퓨터를 사용해서 --> 프로그래밍 언어를 써서
		// 개발자가 하는 일은 ? --> 제품의 개발
		// 실질적으로 무엇을 하느냐 ? 소프트웨어가 하는 일은 ? 만들어진 값을 저장하고 연산하고 출력하고
		// 웹으로 하는 작업의 80% 이상이 검색하고 정렬하는 것
		// 검색해서 나오는 것은? 누군가가 만들어낸 값(정보), 어딘가에 저장되어 있음
		// 검색 = 찾고 싶은 값을 입력함, 이 값은 저장장치로 가서 수많은 작업을 통해 화면으로 결과가 나온다.
		
		// * Method : 함수의 일종, 하나의 기능 단위, 자바는 객체지향 언어, 클래스 안의 함수는 method라고 부르자고 이름 짓는 사람이 만든 것이래
		// public static void main(String[] args) {} 를 메인 메서드를 선언했다고 표현한다
		// 하나의 클래스 안에 여러 개의 메소드가 존재할 수 있음
		// 메소드 안의 구문을 수행하고 싶다면 반드시 "호출"해야 한다!
		
		// 사람이 읽기 편하기 위해서 주석이나 코드를 한줄씩 작성한다. 컴퓨터는 개행을 알아보지 못함
		// 공백문자는 빈 칸, 탭 문자, 빈 줄 등이 있으며,
		// 이러한 공백문자들은 소스코드를 보기 좋게 하고
		// 알아보기 쉽게 만드는데 사용된다.
		// 즉, 프로그램을 구조화된 형태로 표현하는데 유용한다.
		
		printMyName(); // 수행하고 싶은 순서는 입력 순서를 조절하면 된다.
		
		// 콘솔창(Console)에 출력하는 방법
		System.out.print("Hello World!"); // 얘는 출력문
		// System의 S는 대문자, 그다음은 온점(연산자, operator), 그다음 다시 온점, print는 기능(Method), 그다음은 세미콜론
		// 온점은 연산자의 종류 중 참조연산자(reference, 직접접근연산자)
		// 여기서의 out은 Console창을 의미함
		// 메서드는 전부 괄호를 열고 닫는 것으로 끝난다.
		// 논리적인 한 문장이 끝날 때 반드시 세미콜론을 붙임!
		// 출력하고 싶은 내용은 print의 소괄호 안에 작성
		// 70년된 언어 사용의 약속, Hello World로 시작한다, B언어 만든 사람이 시작했다고 함
		// Ctrl + F11로 실행가능
		
		printMyName(); // 메서드 호출 --> printMyName()의 스코프{}로 이동함, 그 스코프가 끝나면 돌아옴

	} // main method, 대소문자 구분, args만 바꿀 수 있지만 바꾸지 않는다, 개발은 협업이므로 타인이 알아볼 수 있어야 함
	  // main 의 자리가 이름의 자리임, main 이라는 이름의 method
	  // static - dynamic - auto 삼총사, static은 자바에서 좀 특별한 의미가 있고, 원래 IT에서 세가지가 세트
	  	// dynamic 동적, auto 자동
	  // void : return type, 반환 타입을 의미하는 자리, 아무것도 없다는 뜻
	  // ()안은 parameter, 매개변수, (String[] args)
	  // 여기의 중괄호 {}는 메인 메소드가 가질 수 있는 요소들을 가지는 영역, 클래스의 중괄호는 클래스의 영역
	  // 메인 메서드는 지금 클래스의 하위 요소로 들어가있음, 여기서 메인 메서드의 하위 요소는 System.으로 시작하는 부분, 둘 다 탭으로 구분되어 있음
	  // 메인 메서드의 중괄호가 닫히면 프로그램이 끝나는 부분
	
	public static void printMyName() { // 자신의 이름을 출력하는 기능을 만들어보자, 메소드 선언
		// 안녕하세요. 제 이름은 XXX입니다. 반갑습니다~
		
		// 어디서 호출을 해야 하는지? 메인 메서드에서 시작하므로 메인 메서드에서 호출해야 함
		
		System.out.print("안녕하세요. 제 이름은 채정민입니다. 반갑습니다~");
		
	} // 메서드는 일회성이 아니고 계속 불러서 쓸 수 있음

}
