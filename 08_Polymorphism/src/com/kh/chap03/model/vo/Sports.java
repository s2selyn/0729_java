package com.kh.chap03.model.vo;

	// 각종 스포츠를 클래스로 만들어보자
	// 스포츠의 개념은? 구성요소는? 규칙, 인원수 등 모든 스포츠가 공통적으로 가질만한 속성
	// 상속도 배우고 다형성도 배웠으니까 공통으로 상속해줄 클래스를 스포츠 클래스(부모클래스)로, 자식은 상속받도록 구현하자

	/*
	 * 추상 클래스
	 * [ 표현법 ]
	 * 접근제한자 abstract class 클래스식별자 {
	 * }
	 * 
	 */

	/*
	 * 클래스 내부에 요소로 추상메소드를 하나라도 선언하는 순간
	 * 클래스 또한 abstract키워드를 붙여서 추상 클래스로 정의해야함 --> 안하면 빨간줄생기고 아무것도못함!
	 * 
	 * 추상클래스 == 필드 + 메소드 + 추상메소드(생략가능)
	 * 
	 * -> 추상메소드가 존재하지 않아도 추상클래스로 정의가능
	 * 추상메소드가 있어야만 추상클래스라는것은 아님!!!
	 * 
	 * 추상클래스 정의의 두가지 관점
	 * => 기술적으로는 개발자가 판단했을 때 이 클래스는 상속을 해주는 (자식클래스들의)부모클래스 역할로만 사용할 것이고,
	 * 	  객체 생성은 불가능해야한다 라고 생각이 들면 추상클래스로 선언
	 * 
	 * => 개념적으로는 개발자가 판단했을 때 해당 클래스가 구체적으로 구현된 상태가 아닌 것 같다 하는
	 * 	  생각이 들면 추상클래스로 선언(괜히 누가 갖다썼다가 그냥 선언된 클래스가 수정됐을때 망가질수도있음)
	 * 
	 * 우리에게 좀 더 와닿게 직관적으로 표현하자면?
	 * => 객체 생성은 불가능하게 하고 공통적인 속성 및 메소드 그리고 타입만 다형성을 적용하게 하고싶다
	 * 
	 * 추상클래스가 되었기때문에 미완성클래스라고도함, 미완성이기때문에 객체는 못만든다
	 * 대신에 자료형은 물려주었기때문에 다형성은 적용가능함 --> Run 클래스 ㄱㄱ
	 * 
	 */

public abstract class Sports { // The type Sports must be an abstract class to define abstract methods
	// 추상 메소드를 가지게 될 클래스는 class 키워드 앞에 똑같이 abstract 키워드 작성
	
	// 필드부
	private int peopleCount;
	
	// 생성자부
	// 기본생성자
	public Sports() {}
	
	// 매개변수생성자
	public Sports(int peopleCount) {
		this.peopleCount = peopleCount;
	}
	
	// getter
	public int getPeopleCount() {
		return peopleCount;
	}
	
	// setter
	public void setPeopleCount(int peopleCount) {
		this.peopleCount = peopleCount;
	}
	
	// 자식들이 오버라이딩 해서 다형성을 적용시켜 사용할 용도의 메소드
	/*
	public void rule() {
		System.out.println("저는 규칙이예용 ㅎㅎ;;");
	}
	*/
	// 지금 스포츠 클래스는 정말 순전히 자식들에게 상속해줄 용도로 공통으로 가지고 있어야할 멤버들을 가질 용도로 만든 클래스
	// 이걸로 객체를 생성할수있다는게 말이되는가? --> 스포츠 클래스를 만들때도 어떤 동작을 시키려고 만든게 아니라 스포츠라는 개념을 만들어놓고 이 개념에다가 나머지 자식에게 물려줘서 이거저거 써야지 할 용도로 만들었음
	// 만들고나니까 공통된 메소드를 가지고 있어야함, 그 용도로 rule을 선언했는데, 이게 스포츠의 의미인가? --> 이렇게 됨, 아무 의미없는 코드가 됨
	// 이렇게 공통적으로 자식에게 물려줄걸 모아놓은 클래스, 하지만 실제로 이 클래스로 작업은 안함, 순전히 다형성 적용해서 부모파입으로 사용할 클래스는 추상클래스라는 개념으로 만들자!
	// 메소드도 실제로 스포츠클래스에 rule을 넣고싶은게 아니라 오버라이딩용도임 --> 이런 메소드도 실제로 메소드 구현하는게 아니고 추상메소드로 만들어주자!
	
	// "추상"
	// abstract
	
	// [ 추상메소드 표현법 ]
	// 접근제한자 abstract 반환형 식별자();
	public abstract void rule(); // 원래 메소드는 메소드이름뒤에 메소드바디(스코프)가 있음, 한글로는 미완성메소드라고도 함 
	// 메소드바디(스코프) 안에 메소드가 어떻게 동작할지 적지않음
	// 지금 상태에서는 The abstract method rule in type Sports can only be defined by an abstract class 라고 나옴
	// 일반적인 클래스는 추상메소드를 멤버로 가질 수 없음 --> 클래스 선언부로 올라가서 수정
	
	// 추상 메소드가 없어도 추상 클래스가 될 수 있음!
	// 추상 메소드가 있으면 무조건 추상 클래스가 되어야함
	// 추상 클래스가 되는 순간 이 클래스로는 객체생성불가 --> Run 클래스 오류생김

}
