package com.kh.chap04.model.vo;

	// 프로그래밍 언어에서의 인터페이스를 생각해보면? 추상클래스를 더욱더 추상화한 끔찍한 친구
	// 선생님이 인터페이스를 설명할 때는 계약서로 설명
	// 계약서에 써져있는것은 8시간 수업하셈! 실제로 도장찍은 강사들은? 8시간 안에서 자기 스타일대로 강의함
	// 계약을 안지키면? 수행(이행) 안할건데?
	// 그럼안녕~ 그래서 인터페이스와 클래스가 계약할때 수행(구현!)해야 하는 모든것이 들어있음 --> 명세

	// 이런식으로 계약서를 만들어둔다면, 찜닭집이 얼마든지 생기더라도
	// 새로운 개발자가 온다면? 기존거를 공부하는데 시간이 소요되거나 새로운개발자의 스타일로 작성하거나
	// 인터페이스가 있으면 이것만 구현하면되고 기존것도 고정해두고 쓸수있고..

public interface Jjimdak { // 계약서
	// 이행의무사항 : 이 계약서에 서명(클래스가 구현)하는 모든 클래스는 반드시 명시된 모든 메소드를 구현해야함
	
	// 명세
	// 무엇을 해야한다 작성이 되어있는데, 어떻게 해야하는지는 안써있는 설계도
	// 조건만 충족한다면 나머지 구현은 자유
	// 찜닭주문하기
	void order(); // 반환형, 메소드식별자만 썼다 --> 접근제한자, 메소드바디가 없음! 인터페이스는 이게 끝
	
}
